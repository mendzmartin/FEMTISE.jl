var documenterSearchIndex = {"docs":
[{"location":"#TimeIndependentSchrodingerEquation.jl","page":"Home","title":"TimeIndependentSchrodingerEquation.jl","text":"","category":"section"},{"location":"#Documentation-of-the-TimeIndependentSchrodingerEquation-module.","page":"Home","title":"Documentation of the TimeIndependentSchrodingerEquation module.","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [TimeIndependentSchrodingerEquation]\nOrder   = [:function, :type]","category":"page"},{"location":"#TimeIndependentSchrodingerEquation.bilineal_forms-Tuple{Function, Function, Function, Gridap.CellData.GenericMeasure}","page":"Home","title":"TimeIndependentSchrodingerEquation.bilineal_forms","text":"bilineal_forms(p,q,r,dŒ©)\n\nAim\n\nReturns bilineals forms (a(u,v) and b(u,v)) for eigenvalues 1D or 2D (equal masses)\n\nArguments\n\np::Function: kinetic energy function from Sturm Liouville_Formulation.\nq::Function: potential energy function from Sturm Liouville_Formulation.\nr::Function: weight or density function from Sturm Liouville_Formulation.\ndŒ©::Gridap.CellData.GenericMeasure: differential FE domain\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.default_solver_eigen_problem-Tuple{TimeIndependentSchrodingerEquation.Params1D}","page":"Home","title":"TimeIndependentSchrodingerEquation.default_solver_eigen_problem","text":"default_solver_eigen_problem(params)\n\nAim\n\nFunction to resolve unidimensonal eigen problem\n\nArguments\n\nparams::Params1D: parameters of 1D potential\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.default_solver_eigen_problem-Tuple{TimeIndependentSchrodingerEquation.Params2D, Tuple}","page":"Home","title":"TimeIndependentSchrodingerEquation.default_solver_eigen_problem","text":"default_solver_eigen_problem(params)\n\nAim\n\nFunction to resolve bidimensonal eigen problem over cartesian grid\n\nArguments\n\nparams::Params2D: parameters fo 2D potential\ndifferent_masses::Tuple: keyword to specify if we want to simulate two particles with diferent masses\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.eigen_problem-Tuple{Function, Function, Gridap.FESpaces.FESpace, Gridap.FESpaces.FESpace}","page":"Home","title":"TimeIndependentSchrodingerEquation.eigen_problem","text":"eigen_problem(weakform‚Çñ,weakform‚Çò,test,trial;; <keyword arguments>)\n\nAim\n\nDefine eigen problem as an input to solve function where we compute eigen problem by Arpack eigs function.\n\nArguments\n\nweakform‚Çñ::Function: forma bilineal lado izquierdo de la formulaci√≥n d√©bil\nweakform‚Çò::Function: forma bilineal lado derecho de la formulaci√≥n d√©bil\ntest::FESpace: espacio de prueba, puede ser MultiFieldFESpace\ntrial::FESpace: espacio de soluci√≥n, puede ser MultiFieldFESpace\nnev::Int=10: n√∫mero de autovalores requeridos\ntol::Float64=10e-6: relative tolerance for convergence of Ritz values\nmaxiter::Integer=100: maximum number of iterations\nexplicittransform::Symbol=:none: shift and invert should be explicitly invoked in julia code\n=:auto:\n=:shiftinvert:\nsigma::Float64=1.0: the level shift used in inverse iteration.\nwhich::Symbol=:LM: eigenvalues of largest magnitude (default)\n=:SM: eigenvalues of smallest magnitude\n=:LR: eigenvalues of largest real part\n=:SR: eigenvalues of smallest real part\n=:LI: eigenvalues of largest imaginary part (nonsymmetric or complex matrix only)\n=:SI: eigenvalues of smallest imaginary part (nonsymmetric or complex matrix only)\n=:BE: compute half of the eigenvalues from each end of the spectrum, biased in favor of the high end. (real symmetric matrix only)\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.eigen_values_and_eigen_vectors-Tuple{Function, Function, Function, Gridap.CellData.GenericMeasure, Gridap.FESpaces.FESpace, Gridap.FESpaces.FESpace}","page":"Home","title":"TimeIndependentSchrodingerEquation.eigen_values_and_eigen_vectors","text":"eigen_values_and_eigen_vectors(p,q,r,dŒ©,USpace,VSpace; <keyword arguments>)\n\nAim\n\nCompute matrix eigen problem and return eigenvalues and eigenvectors\n\nArguments\n\np,q,r::Function: functions from Sturm Liouville formulation\ndŒ©::Gridap.CellData.GenericMeasure: measure of FE grid\nUSpace::FESpace: trial FE Space\nVSpace::FESpace: test FE Space\nparams::Tuple=(nev,tol,maxiter,explicittransform,sigma): params to Arpack eigs function.\nnev::Integer=10: quantity of eigendata to calculate\ntol::Float64=10e-9: relative tolerance for convergence of Ritz values\nmaxiter::Integer=100: maximum number of iterations\nexplicittransform::Symbol=:none: shift and invert should be explicitly invoked in julia code\nsigma::Float64=1.0: the level shift used in inverse iteration.\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.fe_spaces-Tuple{Any, Tuple, String}","page":"Home","title":"TimeIndependentSchrodingerEquation.fe_spaces","text":"fe_spaces(model,reff,grid_type; <keyword arguments>)\n\nAim\n\nCreate finite element (FE) spaces (Trial and Test spaces).\n\nArguments\n\nBC_type::String=\"FullDirichlet\": the type of boundary condition.\nTypeData::Type=ComplexF64: the type of data to define FE spaces.\nconf_type::Symbol=:H1: the regularity of the interpolation at the boundaries of cells in the mesh. (e.g.:L2,:H1,:C0,:Hgrad,)\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.input_data-Tuple{String}","page":"Home","title":"TimeIndependentSchrodingerEquation.input_data","text":"input_data(data_file_name)\n\nAim\n\nDefinition of input data form input.dat file using specific type structures.\n\nArguments\n\ndata_file_name::String: name of input data file\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.measures-Tuple{Any, Integer, Any}","page":"Home","title":"TimeIndependentSchrodingerEquation.measures","text":"measures(model,degree,tags_boundary)\n\nAim\n\nThe triangulation and integration aproximated Lebesgue measures\n\nArguments\n\nmodel: FE grid model.\ndegree::Integer: degree of quadrature rule to use in the cells of triangulation.\ntags_boundary: tags of boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.norm_l2-Tuple{Gridap.CellData.CellField, Gridap.CellData.GenericMeasure}","page":"Home","title":"TimeIndependentSchrodingerEquation.norm_l2","text":"norm_l2(ùú≥,dŒ©)\n\nAim\n\nCompute de L2 norm for specific FE wave function\n\nArguments\n\nùú≥::CellField: specific FE wave function\ndŒ©::Gridap.CellData.GenericMeasure: integration domain\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.read_bin-Tuple{String}","page":"Home","title":"TimeIndependentSchrodingerEquation.read_bin","text":"read_bin(fileName;<keyword arguments>)\n\nAim\n\nRead binary file\n\nArguments\n\nfileName::String: name of file data\nmatrix_data::Bool: optional boolean keyword to specify matrix or array data\nc_dim::Int: optional column number of matrix data\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.read_bin-Union{Tuple{T}, Tuple{IO, Type{T}, Int64, Bool, Int64}} where T","page":"Home","title":"TimeIndependentSchrodingerEquation.read_bin","text":"read_bin(io,::Type{T},n,matrix_data,c_dim)\n\nAim\n\nSpeeds up the read binary file\n\nArguments\n\nio::IO: in/output variable\n::Type{T}: data type\nn::Int: total number of elements in array/matrix data\nmatrix_data::Bool: boolean keyword to specify matrix or array data\nc_dim::Int: column number of matrix data\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.run_default_eigen_problem-Tuple{}","page":"Home","title":"TimeIndependentSchrodingerEquation.run_default_eigen_problem","text":"run_default_eigen_problem\n\nAim\n\nFunction to simulate eigen problems from default potential or custom potential\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.solve-Tuple{TimeIndependentSchrodingerEquation.EigenProblem}","page":"Home","title":"TimeIndependentSchrodingerEquation.solve","text":"solve(prob)\n\nAim\n\nCompute eigen problem by Arpack eigs function and return eigenvalues and eigenvectors.\n\nArguments\n\nprob::EigenProblem: problem deinition\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.space_coord-Tuple{Tuple, Any, Any}","page":"Home","title":"TimeIndependentSchrodingerEquation.space_coord","text":"space_coord(dom,Œîr,n;<keyword arguments>)\n\nAim\n\nReturns coordinate vector (r) and discrete points (pts) for 1D or 2D spaces.\nif dimension==\"1D\" ‚áí dom=(x‚ÇÅ,x‚ÇÇ); Œîr=Œîx; n=nx\nif dimension==\"2d\" ‚áí dom=(x‚ÇÅ,x‚ÇÇ,y‚ÇÅ,y‚ÇÇ); Œîr=(Œîx,Œîy); n=(nx,ny)\n\nArguments\n\ndom::Tuple: FE cartesian domain.\nŒîr:: discretization of FE space.\nn:: number of FE in each direction.\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.write_bin-Union{Tuple{T}, Tuple{Matrix{T}, String}} where T","page":"Home","title":"TimeIndependentSchrodingerEquation.write_bin","text":"write_bin(x,fileName;<keyword arguments>)\n\nAim\n\nWrite binary file from matrix data\n\nArguments\n\nx::Matrix{T}: matrix data\nfileName::String: name of file data\nexisting_file::Bool=false: optional boolean keyword to delete or not delete existing data\n\n\n\n\n\n","category":"method"},{"location":"#TimeIndependentSchrodingerEquation.write_bin-Union{Tuple{T}, Tuple{Vector{T}, String}} where T","page":"Home","title":"TimeIndependentSchrodingerEquation.write_bin","text":"write_bin(x,fileName;<keyword arguments>)\n\nAim\n\nWrite binary file from array data\n\nArguments\n\nx::Array{T,1}: array/vector data\nfileName::String: name of file data\nexisting_file::Bool=false: optional boolean keyword to delete or not delete existing data\n\n\n\n\n\n","category":"method"},{"location":"#**Warning!**","page":"Home","title":"Warning!","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"***->> The documentation is under construction <<-***","category":"page"}]
}
