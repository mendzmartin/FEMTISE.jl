var documenterSearchIndex = {"docs":
[{"location":"contact_information/#**Contact**","page":"Contact Information","title":"Contact","text":"","category":"section"},{"location":"contact_information/","page":"Contact Information","title":"Contact Information","text":"Please, contact the project administrator Mendez Martin for any improve suggestion or questions about package use.","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Tutorial-To-Simulate-Symmetric-Finite-One-Dimensional-Kronig-Penney-Potential","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Tutorial To Simulate Symmetric Finite One Dimensional Kronig-Penney Potential","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Create-simulation-directory","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Create simulation directory","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"First of all we need to create a specific directory to save this specific simulation results ","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"@prompt:~$ mkdir ~/my_directory_path/SFKP1D\n@prompt:~$ cd ~/my_directory_path/SFKP1D","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Create-function-potential","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Create function potential","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"We need to create a specific function potential for Kronig-Penney potential as following:","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"@prompt:~/my_directory_path/SFKP1D$ vi adhoc_potential_function.jl","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"Inside adhoc_potential_function write the following:","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"\"\"\"\n    kronig_penney_sturm_liouville(params)\n\n# Aim\n    - Compute Kronig-Penney potential as Sturm-Liouville problem\n\n# Arguments\n    - `params::Tuple`: tuple with parameters\n\"\"\"\nfunction kronig_penney_sturm_liouville(params::Tuple)\n    num_ions,a,b,V₀=params\n    ħ=1.0;m=1.0;\n    p(x) = 0.5*(ħ*ħ)*(1.0/m);\n    q(x) = symetric_kronig_penney(x[1],num_ions,a,b,V₀)\n    r(x) = 1.0;\n    return p,q,r;\nend\n\nfunction heaviside(x)\n    return 0.5*(sign(x)+1)==true\n end\n\nfunction sym_rect_pot_barr(x,b::Real,V₀::Real)\n   return V₀*(heaviside(x+0.5*b)-heaviside(x-0.5*b))\nend\n\nfunction kronig_penney_center(x,b::Real,V₀::Real)\n    return sym_rect_pot_barr.(x,b,V₀)\nend\n\nfunction kronig_penney_left(x,num_ions::Integer,a::Real,b::Real,V₀::Real)\n    result=0.0\n    for i in 1:num_ions\n        result = result .+ sym_rect_pot_barr.(x.+i*a,b,V₀)\n    end\n    return result\nend\n\nfunction kronig_penney_right(x,num_ions::Integer,a::Real,b::Real,V₀::Real)\n    return kronig_penney_left(-x,num_ions,a,b,V₀)\nend\n\nexport symetric_kronig_penney\n\"\"\"\n    symetric_kronig_penney(x,num_ions,a,b,V₀)\n\n# Aim\n    - Compute symetric Kronig-Penney potential\n\n# Arguments\n    - `x::Real`: input value\n    - `num_ions::Integer`: number of ions\n    - `a::Real`: distance between ions\n    - `b::Real`: width of barrier\n    - `V₀::Real`: height of barrier\n\"\"\"\nfunction symetric_kronig_penney(x,num_ions::Integer,a::Real,b::Real,V₀::Real)\n    if (mod(num_ions,2) == 0)\n        error(\"num_ions keyword need to be odd\")\n        stop()\n    elseif (num_ions==1)\n        kp = kronig_penney_center(x,b,V₀)\n    else\n        kp = kronig_penney_center(x,b,V₀) .+ kronig_penney_left(x,convert(Int,(num_ions-1)/2),a,b,V₀) .+ kronig_penney_right(x,convert(Int,(num_ions-1)/2),a,b,V₀)\n    end\n    return kp\nend","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"Then using Jupyter Notebook (by intermediate Visual Studio Code) we can analyse output file so:","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"@prompt:~/my_directory_path/SFKP1D$ code SFKP1D.ipynb","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"Inside SFKP1D.ipynb we need to write the following:","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Environment-Activation","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Environment Activation","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"Activate the specific environment for this simulation, note that within the activate function we must place the path where we want to locate this environment.","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"using Pkg\nPkg.activate(\".\")\nPkg.instantiate()","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Develop-Package","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Develop Package","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"In case it is necessary, we must add the FEMTISE package to the environment with the local location.","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"develop_package = false\npath_repo=\"~/my_path_repo/\"\ndevelop_package ? Pkg.develop(path=path_repo*\"FEMTISE.jl\") : nothing","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Adding-Packages","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Adding Packages","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"We install (if it is necessary) and use specific packages for the simulation.","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"install_pkg = false\nif install_pkg\n    Pkg.add(\"Gridap\")\n    Pkg.add(\"Plots\")\nend\nusing FEMTISE;\nusing Gridap;\nusing Plots;","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Miscellaneous-functions","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Miscellaneous functions","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"We include the potential function defined in specific Julia file:","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"include(\"~/my_directory_path/SFKP1D/adhoc_potential_function.jl\")","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Potential-parameters","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Potential parameters","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"We define the properties of the potential","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"grid_size_length=276;\npotential_depth=-0.5;\ndistance_between_wells=11;\nwell_width=1;\nnum_ions=23;\nspace_discretization=0.01;\n\nunit_cell_potential=distance_between_wells+well_width;","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Checking-representation","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Checking representation","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"Taking into account the finite size of the FE grid and the dimensions of the potential wells (width and separation), we can check if the number of sites can be represented correctly.","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"quantity_check = num_ions*unit_cell_potential;\n(grid_size_length ≥ quantity_check) ? println(\"The value of grid size length is ok (≥ $(quantity_check)).\") : println(\"Increase grid size length, must be grid_size_length ≥ $(quantity_check).\")","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Grid-Building","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Grid Building","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"We create the one-dimensional FE grid.","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"grid_type=\"simple_line\";\nparams_model=(\"./\",\"model1D\",(-0.5*grid_size_length,0.5*grid_size_length),space_discretization);\nmodel1D=make_model(grid_type,params_model);\nrm(params_model[1]*params_model[2]*\".msh\")","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"The last step could be omitted if you want to save the grid in .msh format for external visualization.","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Grid-points","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Grid points","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"We construct the point vectors (grid evaluation points) and coordinate vectors.","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"point_number=round(Int,abs(grid_size_length/space_discretization)+1)\nspace_coordinate,points=space_coord((-0.5*grid_size_length,0.5*grid_size_length),space_discretization,point_number-1;dimension=\"1D\")","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Plotting-potential-function","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Plotting potential function","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"fig = plot(space_coordinate,symetric_kronig_penney(space_coordinate,num_ions,unit_cell_potential,well_width,potential_depth),label=\"\")\nfig = plot!(fig,xlabel=\"space coordinate (x [au])\",ylabel=\"potential depth (v [au])\")\ndisplay(fig)","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Boundary-conditions","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Boundary conditions","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"We define the boundary conditions of the system, in our case we define homogeneous boundary conditions throughout the boundary.","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"BC_type=\"FullDirichlet\";\nFullDirichlet_values,FullDirichlet_tags=make_boundary_conditions(grid_type,BC_type,ComplexF64);","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#FE-Domains","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"FE Domains","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"We construct the FE domains of the grid: interior and boundary. Additionally, we construct the differentials of these domains.","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"interior_FE_domain,differential_interior_FE_domain,boundary_FE_domain,differential_boundary_FE_domain = measures(model1D,3,FullDirichlet_tags)","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#FE-Reference","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"FE Reference","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"We define the interpolation polynomials to be used and create the Test and Trial spaces associated with the weak formulations of the problem.","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"reff = ReferenceFE(lagrangian,Float64,2)\nTestSpace,TrialSpace = fe_spaces(model1D,reff,grid_type;BC_type=BC_type,TypeData=ComplexF64)","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Sturm-Liouville-formulation","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Sturm-Liouville formulation","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"We define the functions to use the Sturm-Liouville type formulation.","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"p,q,r = kronig_penney_sturm_liouville((num_ions,unit_cell_potential,well_width,potential_depth))","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Eigen-value-problem","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Eigen value problem","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"We solve the eigenvalue problem","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"eigen_energies,eigen_states = eigen_values_and_eigen_vectors(p,q,r,differential_interior_FE_domain,TrialSpace,TestSpace;\nparams=(10,1e-9,500,:none,potential_depth))","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/#Plotting-results","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Plotting results","text":"","category":"section"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"fig=plot()\nprobability_densities=FEMTISE.density(eigen_states)\nfor i in 1:3#eachindex(ϕ)\n    fig=plot!(space_coordinate,probability_densities[i].(points),\n    label=\"probability density of energy=$(round(real(eigen_energies[i]),digits=4))\",\n    legend=:bottomleft)\nend\n\nfig=plot!(xlabel=\"space coordinate (x [au])\",ylabel=\" \")\nfig=plot!(space_coordinate,0.1 .* symetric_kronig_penney(space_coordinate,num_ions,unit_cell_potential,well_width,potential_depth),\nlabel=\"0.1*Kronig-Penney potential [au]\")\n\ndisplay(fig)","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"(Image: figure)","category":"page"},{"location":"examples/symmetric_finite_1d_kronig_penney_potential/","page":"Symmetric Finite 1D Kronig-Penney Potential","title":"Symmetric Finite 1D Kronig-Penney Potential","text":"We can save de figure using savefig(fig,\"example_kronig_penney.pdf\").","category":"page"},{"location":"computing_details/#Comparison-between-ARPACK,-LAPACK-and-BLAS-packages","page":"Computing details","title":"Comparison between ARPACK, LAPACK and BLAS packages","text":"","category":"section"},{"location":"computing_details/","page":"Computing details","title":"Computing details","text":"Library Purpose Usage Performance Dependence\nARPACK Solves large-scale eigenvalue problems for sparse matrices. Suitable for large, sparse matrices. Optimized for sparse matrices, efficient for large-scale problems. Depends on LAPACK and BLAS for some operations[1][2].\nLAPACK Provides routines for solving systems of linear equations, least squares problems, and eigenvalue problems for dense and banded matrices. Suitable for dense matrices or sparse matrices with trivial structure. Optimized for dense matrices, efficient for high-performance computing. Often used with BLAS for low-level operations[1].\nBLAS Provides low-level routines for performing basic linear algebra operations such as vector and matrix operations. Underlies LAPACK and other higher-level linear algebra libraries. Optimized for low-level operations, highly efficient for matrix multiplications and vector operations. Often used as a building block for other libraries like LAPACK and ATLAS[3].","category":"page"},{"location":"computing_details/#Additional-Notes:","page":"Computing details","title":"Additional Notes:","text":"","category":"section"},{"location":"computing_details/","page":"Computing details","title":"Computing details","text":"ARPACK: Designed for solving large-scale eigenvalue problems efficiently, especially for sparse matrices. It depends on LAPACK and BLAS for some operations[1][2].\nLAPACK: A comprehensive library for dense and banded matrices, providing routines for matrix factorizations and solving linear systems. It is often used with BLAS for optimized performance[1][3].\nBLAS: The foundation for many linear algebra libraries, providing low-level operations like matrix multiplication and vector operations. It is highly optimized for performance and is used as a building block for other libraries[3].","category":"page"},{"location":"computing_details/","page":"Computing details","title":"Computing details","text":"This table highlights the key differences in the purpose, usage, and performance characteristics of these libraries, which are essential for scientific computing and high-performance computing applications.","category":"page"},{"location":"computing_details/","page":"Computing details","title":"Computing details","text":"Citations:","category":"page"},{"location":"computing_details/","page":"Computing details","title":"Computing details","text":"[1] Lehoucq, R.B., Sorensen, D.C. and Yang, C., 1998. ARPACK users' guide: solution of large-scale eigenvalue problems with implicitly restarted Arnoldi methods. Society for Industrial and Applied Mathematics.\n[2] http://rsuib.cc.rsu.ru/libraries/ARPACK/node1.html\n[3] https://stackoverflow.com/questions/17858104/what-is-the-relation-between-blas-lapack-and-atlas","category":"page"},{"location":"computing_details/#Implementation-of-FEMTISE-package","page":"Computing details","title":"Implementation of FEMTISE package","text":"","category":"section"},{"location":"computing_details/","page":"Computing details","title":"Computing details","text":"Here you can see the specific implementation of solve function to resolve eigen value problems.","category":"page"},{"location":"computing_details/#Comparison-between-FDM,-FEM-and-DVR","page":"Computing details","title":"Comparison between FDM, FEM and DVR","text":"","category":"section"},{"location":"computing_details/","page":"Computing details","title":"Computing details","text":"In summary, FDM (Finite Difference Method) is the simplest to implement but limited to regular grids, FEM (Finite Element Method) is the most flexible and accurate but requires more sophisticated mathematics, and DVR (Discrete Variable Representation) is tailored for quantum mechanical applications. The choice depends on the specific problem, geometry, and desired accuracy.","category":"page"},{"location":"computing_details/","page":"Computing details","title":"Computing details","text":"Property FDM FEM DVR\nType grid method grid method pseudo spectral method\nDiscretization Divides the domain into a grid of points and approximates derivatives using differences between adjacent points Divides the domain into small elements of simple geometric shapes and uses basis functions to approximate the solution within each element Represents the wavefunction on a discrete grid and uses finite difference approximations for derivatives. Use a diagonal potential energy matrix, allowing for efficient computation of quantum systems.\nGeometry Works best on regular, rectangular domains Requires a mesh of elements (triangles, quadrilaterals, tetrahedra, etc.) to discretize the domain. Can handle complex, arbitrarily shaped domains by using unstructured meshes Can use both regular and irregular grids. Does not require a mesh in the traditional sense; it uses a grid of points to represent the wavefunction and potential energy.\nFormulation Directly discretizes the differential equations Uses a variational formulation based on minimizing a functional Discretizes the Schrödinger equation using finite differences\nComputing objects use structured and sparse matrices use sparse matrices and need to compute potential matrix which is multidimensional intensive potential matrix is diagonal and kinetic matrix is a full but has analytical expression\nAccuracy Typically lower order of accuracy than FEM Can achieve higher accuracy by using higher-order polynomial approximations Accuracy depends on the grid spacing and order of finite difference approximations used\nConservation Does not inherently conserve quantities like mass, momentum, energy Conserves quantities like mass and momentum if the basis functions satisfy the conservation laws Inherently conserves probability in quantum mechanics applications\nApplications Commonly used for heat transfer, fluid flow, and electromagnetics problems Widely used for structural analysis, heat transfer, fluid dynamics, and electromagnetics Primarily used for solving the Schrödinger equation in quantum mechanics and quantum chemistry","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/#Tutorial-To-Simulate-Isotropic-Two-Dimensional-Harmonic-Oscillator","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Tutorial To Simulate Isotropic Two Dimensional Harmonic Oscillator","text":"","category":"section"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/#Create-simulation-directory","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Create simulation directory","text":"","category":"section"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"First of all we need to create a specific directory to save this specific simulation results ","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"@prompt:~$ mkdir ~/my_directory_path/QHO2D\n@prompt:~$ cd ~/my_directory_path/QHO2D","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/#Create-function-potential","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Create function potential","text":"","category":"section"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"We need to create a specific function potential for quantum harmonic oscillator 2D as following:","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"@prompt:~/my_directory_path/QHO2D$ vi adhoc_potential_function.jl","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"Inside adhoc_potential_function write the following:","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"export qho_2d\n\"\"\"\n    qho_2d(x,params)\n\n# Aim:\n    This function is a simple implementation of the 2D quantum harmonic oscillator \n    potential. \n    It is used to test the simulation of the isotropic quantum harmonic oscillator in 2D.\n\n# Arguments\n    x::Array{Float64,1} : The position of the particle in 2D.\n    params::Tuple : A tuple containing the parameters of the potential. \n        params[1]::Float64 : The frequency of the oscillator.\n        params[2]::Float64 : The position of the minimum of the potential in the x \n        direction.\n        params[3]::Float64 : The position of the minimum of the potential in the y \n        direction.\n\"\"\"\nfunction qho_2d(x,params::Tuple)\n    ω,x₁,y₁=params\n    return 0.5*(ω*ω)*((x[1]-x₁)*(x[1]-x₁)+(x[2]-y₁)*(x[2]-y₁))\nend","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/#Input-file","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Input file","text":"","category":"section"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"We need to create an input file to simulate using default solver function inside FEMTISE package","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"@prompt:~/my_directory_path/QHO2D$ vi input.dat","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"Inside input.dat we need to write the following.","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"full_path_name              = ~/my_directory_path/QHO2D/name_output_file\ndom_type                    = s\nnev                         = 10\ndimension                   = 2D\nsigma                       = 0.0\nadhoc_file_name             = ~/my_directory_path/QHO2D/adhoc_potential_function\npotential_function_name     = qho_2d\nparams_potential_types      = f f f\nparams_potential            = 1.0 0.0 0.0\nanalysis_param              = false\noutput_format_type          = jld2 eigen\n## ONLY FOR 1D EIGENPROBLEMS\nL                           = \nΔx                          = \n## ONLY FOR 2D EIGENPROBLEMS\nLx                          = 10\nLy                          = 10\nnx                          = 100\nny                          = 100\ndifferent_masses            = false\nreduced_density             = false","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"Note that ~/my_path_repo/ is the directory path where we can find FEMTISE.jl package.","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/#Run-script","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Run script","text":"","category":"section"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"Create Julia code as","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"@prompt:~/my_directory_path/QHO2D$ vi run.jl","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"Inside run.jl we need to write the following.","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"begin\n    using Pkg\n    Pkg.activate(\"~/my_directory_path/QHO2D/\")\n    develop_package = true; develop_package ? Pkg.develop(path=\"~/my_path_repo/FEMTISE.jl\") : nothing\n    Pkg.instantiate()\n    using FEMTISE;\n    run_default_eigen_problem(set_type_potential(\"~/my_directory_path/QHO2D/input.dat\"))\nend","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"After this we can run the simulation using Julia compiler (for example: using multithread running with four threads)","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"@prompt:~/my_directory_path/QHO2D$ julia -t 4 run.jl ","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/#Analysis","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Analysis","text":"","category":"section"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"After running we obtain an output data file in jld2 format called name_output_file_eigen_data.jld2.","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"Then using Jupyter Notebook (by intermediate Visual Studio Code) we can analyse output file so:","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"@prompt:~/my_directory_path/QHO2D$ code QHO2D.ipynb","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"Inside QHO2D.ipynb we need to write the following:","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/#Environment","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Environment","text":"","category":"section"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"Activate Julia environment","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"using Pkg\nPkg.activate(\"~/my_directory_path/QHO2D/\")\nPkg.instantiate()","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"Is necessary to mark FEMTISE package as developed package using specific path repository:","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"develop_package = true; develop_package ? Pkg.develop(path=\"~/my_path_repo/FEMTISE.jl\") : nothing","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"Now we install package (if it is nesseary) and use specific packages to analyse output data:","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"install_pkg = true\nif install_pkg\n    Pkg.add(\"Plots\")\n    Pkg.add(\"PlotlyJS\")\nend\nusing FEMTISE;\nusing Plots;","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/#Read-output-data","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Read output data","text":"","category":"section"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"All the information that we need to specify is where we find input file then using specific functions we can collect output data","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"path_input_file_name=\"~/my_directory_path/QHO2D/input.dat\"\nsimulation_info, output_data = collect_result_data(true,path_input_file_name)","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/#Plotting-figures","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Plotting figures","text":"","category":"section"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"Defining functions to plot data we have:","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"\"\"\"\n    plot_eigenvalues(id,results;<keyword arguments>)\n\n# Aim\n- Plot the eigenvalues of the Hamiltonian operator.\nThe eigenvalues are obtained from the diagonalization of the Hamiltonian operator.\nThe keyword arguments are used to set the title, xlabel, ylabel, and legend of the plot.\n\n# Arguments\n- `id`: InputData or InputData1D or InputData2D object.\n- `results`: Results object.\n- `keyword arguments`:\n    - `set_title::String`: Title of the plot.\n    - `set_xlabel::String`: Label of the x-axis.\n    - `set_ylabel::String`: Label of the y-axis.\n    - `set_legend::Symbol`: Position of the legend.\n\"\"\"\nfunction plot_eigenvalues(id,results;\n    set_title::String=\"\",\n    set_xlabel::String=\"Energy level (n)\",set_ylabel::String=\"Eigen-energies (ϵn [au])\",set_legend::Symbol=:bottomright)\n    if id.analysis_param == false\n        plotlyjs()\n        figure = scatter(real(results.ϵ),title=set_title,xlabel=set_xlabel,ylabel=set_ylabel,legend=set_legend)\n    else\n        println(\"PLOT ERROR.\")\n        println(\"Check attributes, you are using the wrong function method. Analysis parameter is activated.\")\n        figure = nothing\n    end\n    return figure\nend\n\n\"\"\"\n    density2D(x,y,phi_n)\n\n# Aim\n- Calculate the probability density of the eigenstates in 2D.\n\n# Arguments\n- `x::Array{Float64,1}`: Array of x-coordinates.\n- `y::Array{Float64,1}`: Array of y-coordinates.\n- `phi_n::Array{Complex{Float64},1}`: Array of eigenstates.\n\"\"\"\nfunction density2D(x,y,phi_n)\n    density=zeros(length(y),length(x))\n    for i in eachindex(y)\n        for j in eachindex(x)\n            index=(j-1)*length(y)+i\n            density[i,j]=real.(conj.(phi_n[index]).*phi_n[index])\n        end\n    end\n    return density\nend\n\n\"\"\"\n    plot_eigenstates(id,results,index_nev;<keyword arguments>)\n\n# Aim\n- Plot the eigenstates of the Hamiltonian operator.\nThe eigenstates are obtained from the diagonalization of the Hamiltonian operator.\nThe eigenstates are plotted for the energy level specified by the index_nev variable.\nThe keyword arguments are used to set the color map of the plot (only for 2D plot).\n\n# Arguments\n- `id`: InputData or InputData1D or InputData2D object.\n- `results`: Results object.\n- `index_nev::Int`: Energy level to plot.\n- `keyword arguments`:\n    - `mapcolor::Symbol=:rainbow1`: Color map of the plot (only for 2D plot).\n\"\"\"\nfunction plot_eigenstates(id,results,index_nev::Int;mapcolor::Symbol=:rainbow1)\n    if id.analysis_param == false\n        if id.params.dimension == \"1D\"\n            plotlyjs();\n            if ((typeof(id) <: InputData) || (typeof(id) <: InputData1D && id.\n            output_format_type == (\"bin\",\"eigen\")))\n                rho = real.(conj.(results.ϕ[:,index_nev]).*(results.ϕ[:,index_nev]))\n            elseif (typeof(id) <: InputData1D && id.output_format_type in [(\"jld2\",\"eigen\"),\n            (\"jld2\",\"all\")])\n                rho = real.(conj.(results.ϕ[index_nev].(results.pts)).*(results.ϕ\n                [index_nev].(results.pts)))\n            end\n            figure = plot(results.r,rho,lw=2,lc=:black,label=\"\")\n            figure = scatter!(results.r,rho,label=\"n=$(index_nev)\",lw=0.1)\n            figure = plot!(xlabel=\"Coordinate (x [au])\",ylabel=\"Probability density (ρn(x))\n            \",ticks = :native)\n        elseif id.params.dimension == \"2D\"\n            gr();\n            if ((typeof(id) <: InputData) || (typeof(id) <: InputData2D && id.\n            output_format_type == (\"bin\",\"eigen\")))\n                if id.params.nx==id.params.ny\n                    rho = density2D(results.r[:,1],results.r[:,2],results.ϕ[:,index_nev])\n                    figure1 = contour(results.r[:,1],results.r[:,2],rho,levels=10, \n                    color=mapcolor, fill=true,lw=0)\n                else\n                    rho = density2D(results.r[1:id.params.nx,1],results.r[1:id.params.ny,2],\n                    results.ϕ[:,index_nev])\n                    figure1 = contour(results.r[1:id.params.nx,1],results.r[1:id.params.ny,\n                    2],rho, levels=10, color=mapcolor, fill=true,lw=0)\n                end\n            elseif (typeof(id) <: InputData2D && id.output_format_type in [(\"jld2\",\"eigen\"),\n            (\"jld2\",\"all\")])\n                rho = density2D(results.r[1],results.r[2],results.ϕ[index_nev].(results.\n                pts))\n                figure1 = contour(results.r[1],results.r[2],rho,levels=10, color=mapcolor, \n                fill=true,lw=0)\n            end\n            figure1 = plot(figure1,title=\"Probability density (ρ$(index_nev)(x))\",\n            xlabel=\"Coordinate (x [au])\", ylabel=\"Coordinate (y [au])\")\n    \n            if id.reduced_density\n                plotlyjs()\n                if ((typeof(id) <: InputData) || (typeof(id) <: InputData1D && id.\n                output_format_type == (\"bin\",\"eigen\")))\n                    if id.params.nx==id.params.ny\n                        figure2=plot(results.r[:,1],results.rhoDOF1[:,index_nev],label=\"ρn\n                        (x)\")\n                        figure2=plot!(results.r[:,2],results.rhoDOF2[:,index_nev],label=\"ρn\n                        (y)\")\n                    else\n                        figure2=plot(results.r[1:id.params.nx,1],results.rhoDOF1[:,\n                        index_nev],label=\"ρn(x)\")\n                        figure2=plot!(results.r[1:id.params.ny,2],results.rhoDOF2[:,\n                        index_nev],label=\"ρn(y)\")\n                    end\n                elseif (typeof(id) <: InputData2D && id.output_format_type in [(\"jld2\",\n                \"eigen\"),(\"jld2\",\"all\")])\n                    figure2 = plot(results.r[1],results.rhoDOF1[:,index_nev],label=\"ρn(x)\")\n                    figure2 = plot!(results.r[2],results.rhoDOF2[:,index_nev],label=\"ρn(y)\")\n                end\n                figure2=plot!(title=\"Reduced probability density for level n=$(index_nev)\")\n                figure2=plot!(xlabel=\"Coordinate (x or y [au])\",ylabel=\"\",ticks = :native)\n\n                figure = plot(figure1,figure2,layout=2)\n            else\n                figure = figure1\n            end\n        end\n    else\n        println(\"PLOT ERROR.\")\n        println(\"You can not plot eigenstate with activated analysis params.\")\n        figure = nothing\n    end\n    return figure\nend","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"Now we can plot eigenenergies:","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"fig1 = plot_eigenvalues(simulation_info, output_data)\ndisplay(fig1)","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"(Image: figure)","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"Also, we can export figures as *pdf format using","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"savefig(fig1,\"./eigen_energies.pdf\")","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"and eigenfunctions:","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"eigenstate_to_show=1\nfig2=plot_eigenstates(simulation_info, output_data,eigenstate_to_show;mapcolor=:turbo)\ndisplay(fig2)","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"(Image: figure)","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"eigenstate_to_show=2\nfig2=plot_eigenstates(simulation_info, output_data,eigenstate_to_show;mapcolor=:turbo)\ndisplay(fig2)","category":"page"},{"location":"examples/isotropic_2d_harmonic_oscillator_potential/","page":"Isotropic 2D Quantum Harmonic Oscillator Potential","title":"Isotropic 2D Quantum Harmonic Oscillator Potential","text":"(Image: figure)","category":"page"},{"location":"function_information/#Documentation-of-the-FEMTISE-module.","page":"Function Information","title":"Documentation of the FEMTISE module.","text":"","category":"section"},{"location":"function_information/#FEMTISE.aprox_dirac_delta-Tuple{Any, Tuple{Float64, Float64, Int64, Float64}}","page":"Function Information","title":"FEMTISE.aprox_dirac_delta","text":"aprox_dirac_delta(x,params)\n\nAim\n\nApproximation of Dirac delta function as rectangular function\n\nArguments\n\nx: independent variable (is a FE coordinate object)\nparams::Tuple{Float64,Float64,Int,Float64}: parameters\nx₀::Float64: specific point to centre dirac function\nδnorm::Float64: norm value to obtain normalized delta function\ncomponent::Int: component of x coordinate\nΔx::Float64: \tthickness of rectangular function\n\nOutput\n\nresult::Vector: integral value\n\nExample\n\nx=0:0.1:10;\nparams=(5.0,1.0,1,0.1);\nresult=aprox_dirac_delta(x,params)\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.bilineal_forms-Tuple{Function, Function, Function, Gridap.CellData.GenericMeasure}","page":"Function Information","title":"FEMTISE.bilineal_forms","text":"bilineal_forms(p,q,r,dΩ)\n\nAim\n\nReturns bilineals forms (a(u,v) and b(u,v)) for eigenvalues 1D or 2D (equal masses)\n\nArguments\n\np::Function: kinetic energy function from Sturm Liouville_Formulation.\nq::Function: potential energy function from Sturm Liouville_Formulation.\nr::Function: weight or density function from Sturm Liouville_Formulation.\ndΩ::Gridap.CellData.GenericMeasure: differential FE domain\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.build_input_data-Tuple{String}","page":"Function Information","title":"FEMTISE.build_input_data","text":"build_input_data(full_path_name)\n\nAim\n\nBuild input data from a file\n\nArguments\n\nfull_path_name::String: full path name to input data file\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.collect_result_data-Tuple{Bool, String}","page":"Function Information","title":"FEMTISE.collect_result_data","text":"collect_result_data(switch_input_file,full_path_name)\n\nAim\n\nCollect result data\n\nArguments\n\nswitch_input_file::Bool: switch input file\nfull_path_name::String: full path name\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.coord_first_moment-Tuple{Vector{Gridap.CellData.CellField}, Gridap.FESpaces.FESpace, Any, Gridap.CellData.GenericMeasure, Int64}","page":"Function Information","title":"FEMTISE.coord_first_moment","text":"coord_first_moment(psi,TrialSpace,Omega,dOmega,x_component)\n\nAim\n\nCompute first moment of coordinate (specific component)\n\nArguments\n\npsi::Vector{CellField}: array of FE wave functions\nTrialSpace::FESpace: Trial finite element space\nOmega: Finite element domain\ndOmega::Gridap.CellData.GenericMeasure: integration domain\nx_component::Int: component of specific coordinate variable\n\nOutput\n\nexpval::Array{Float64}: array of expectation values of specific coordinate\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.coord_second_moment-Tuple{Vector{Gridap.CellData.CellField}, Gridap.FESpaces.FESpace, Any, Gridap.CellData.GenericMeasure, Int64}","page":"Function Information","title":"FEMTISE.coord_second_moment","text":"coord_second_moment(psi,TrialSpace,Omega,dOmega,x_component)\n\nAim\n\nCompute first moment of coordinate (specific component) or position variance\n\nArguments\n\npsi::Vector{CellField}: array of FE wave functions\nTrialSpace::FESpace: Trial finite element space\nOmega: Finite element domain\ndOmega::Gridap.CellData.GenericMeasure: integration domain\nx_component::Int: component of specific coordinate variable\n\nOutput\n\nvar::Array{Float64}: array of variance values of specific coordinate\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.coord_standar_deviation-Tuple{Vector{Float64}, Vector{Float64}}","page":"Function Information","title":"FEMTISE.coord_standar_deviation","text":"coord_standar_deviation(expval,var)\n\nAim\n\nCompute standar deviation of coordinate (specific component)\n\nArguments\n\nexpval::Array{Float64}: array of expectation values of specific coordinate\nvar::Array{Float64}: array of variance values of specific coordinate\n\nOutput\n\nsigma::Array{Float64}: array of standar deviation of specific coordinate\n\nExample\n\nexpval=[1.0,2.0,3.0];\nvar=[0.1,0.2,0.3];\nsigma=coord_standar_deviation(expval,var)\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.coord_standar_deviation-Tuple{Vector{Gridap.CellData.CellField}, Gridap.FESpaces.FESpace, Any, Gridap.CellData.GenericMeasure, Int64}","page":"Function Information","title":"FEMTISE.coord_standar_deviation","text":"coord_standar_deviation(psi,TrialSpace,Omega,dOmega,x_component)\n\nAim\n\nCompute standar deviation of coordinate (specific component)\n\nArguments\n\npsi::Vector{CellField}: array of FE wave functions\nTrialSpace::FESpace: Trial finite element space\nOmega: Finite element domain\ndOmega::Gridap.CellData.GenericMeasure: integration domain\nx_component::Int: component of specific coordinate variable\n\nOutput\n\nsigma::Array{Float64}: array of standar deviation of specific coordinate\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.default_solver_eigen_problem-Tuple{Params1D}","page":"Function Information","title":"FEMTISE.default_solver_eigen_problem","text":"default_solver_eigen_problem(params)\n\nAim\n\nFunction to resolve unidimensonal eigen problem\n\nArguments\n\nparams::Params1D: parameters of 1D potential\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.default_solver_eigen_problem-Tuple{Params2D, Tuple}","page":"Function Information","title":"FEMTISE.default_solver_eigen_problem","text":"default_solver_eigen_problem(params)\n\nAim\n\nFunction to resolve bidimensonal eigen problem over cartesian grid\n\nArguments\n\nparams::Params2D: parameters fo 2D potential\ndifferent_masses::Tuple: keyword to specify if we want to simulate two particles with diferent masses\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.density-Tuple{Vector{Gridap.CellData.CellField}}","page":"Function Information","title":"FEMTISE.density","text":"density(phi)\n\nAim\n\nCompute probability density from set of specific wave functions (FE object)\n\nArguments\n\nphi::Vector{CellField}: array of eigenstates (array of FE objects)\n\nOutput\n\nrho::Vector{CellField}: Array of probability densities (array of FE objects)\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.eigen_problem-Tuple{Function, Function, Gridap.FESpaces.FESpace, Gridap.FESpaces.FESpace}","page":"Function Information","title":"FEMTISE.eigen_problem","text":"eigen_problem(weakform_k,weakform_m,test,trial; <keyword arguments>)\n\nAim\n\nDefine eigen problem as an input to solve function where we compute eigen problem by Arpack eigs function.\n\nArguments\n\nweakform_k::Function: forma bilineal lado izquierdo de la formulación débil\nweakform_m::Function: forma bilineal lado derecho de la formulación débil\ntest::FESpace: espacio de prueba, puede ser MultiFieldFESpace\ntrial::FESpace: espacio de solución, puede ser MultiFieldFESpace\nnev::Int=10: número de autovalores requeridos\ntol::Float64=10e-6: relative tolerance for convergence of Ritz values\nmaxiter::Integer=100: maximum number of iterations\nexplicittransform::Symbol=:none: shift and invert should be explicitly invoked in julia code\n=:auto:\n=:shiftinvert:\nsigma::Float64=1.0: the level shift used in inverse iteration.\nwhich::Symbol=:LM: eigenvalues of largest magnitude (default)\n=:SM: eigenvalues of smallest magnitude\n=:LR: eigenvalues of largest real part\n=:SR: eigenvalues of smallest real part\n=:LI: eigenvalues of largest imaginary part (nonsymmetric or complex matrix only)\n=:SI: eigenvalues of smallest imaginary part (nonsymmetric or complex matrix only)\n=:BE: compute half of the eigenvalues from each end of the spectrum, biased in favor of the high end.         (real symmetric matrix only)\n\nReturns\n\nEigenProblem: problem definition\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.eigen_values_and_eigen_vectors-Tuple{Function, Function, Function, Function, Gridap.CellData.GenericMeasure, Gridap.FESpaces.FESpace, Gridap.FESpaces.FESpace}","page":"Function Information","title":"FEMTISE.eigen_values_and_eigen_vectors","text":"eigen_values_and_eigen_vectors(p₁,p₂,q,r,dΩ,USpace,VSpace; <keyword arguments>)\n\nAim\n\nCompute matrix eigen problem and return eigenvalues and eigenvectors\n\nArguments\n\np₁,p₂,q,r::Function: functions from Sturm Liouville formulation\ndΩ::Gridap.CellData.GenericMeasure: measure of FE grid\nUSpace::FESpace: trial FE Space\nVSpace::FESpace: test FE Space\nparams::Tuple=(nev,tol,maxiter,explicittransform,sigma): params to Arpack eigs function.\nnev::Integer=10: quantity of eigendata to calculate\ntol::Float64=10e-9: relative tolerance for convergence of Ritz values\nmaxiter::Integer=100: maximum number of iterations\nexplicittransform::Symbol=:none: shift and invert should be explicitly invoked in julia code\nsigma::Float64=1.0: the level shift used in inverse iteration.\n\nExample\n\nusing Gridap\nusing FEMTISE\nusing LinearAlgebra\n\n# Define functions\np₁(x)=1.0\np₂(x)=0.0\nq(x)=0.0\nr(x)=1.0\n# Define measure\nΩ=1.0:0.1:10.0\ndΩ=Gridap.CellData.CellData(Ω)\n# Define FE Spaces\nUSpace=fe_space(1,1,Ω)\nVSpace=fe_space(1,1,Ω)\n# Compute eigenvalues and eigenvectors\nϵ,ϕ=eigen_values_and_eigen_vectors(p₁,p₂,q,r,dΩ,USpace,VSpace)\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.eigen_values_and_eigen_vectors-Tuple{Function, Function, Function, Gridap.CellData.GenericMeasure, Gridap.FESpaces.FESpace, Gridap.FESpaces.FESpace}","page":"Function Information","title":"FEMTISE.eigen_values_and_eigen_vectors","text":"eigen_values_and_eigen_vectors(p,q,r,dΩ,USpace,VSpace; <keyword arguments>)\n\nAim\n\nCompute matrix eigen problem and return eigenvalues and eigenvectors\n\nArguments\n\np,q,r::Function: functions from Sturm Liouville formulation\ndΩ::Gridap.CellData.GenericMeasure: measure of FE grid\nUSpace::FESpace: trial FE Space\nVSpace::FESpace: test FE Space\nparams::Tuple=(nev,tol,maxiter,explicittransform,sigma): params to Arpack eigs function.\nnev::Integer=10: quantity of eigendata to calculate\ntol::Float64=10e-9: relative tolerance for convergence of Ritz values\nmaxiter::Integer=100: maximum number of iterations\nexplicittransform::Symbol=:none: shift and invert should be explicitly invoked in julia code\nsigma::Float64=1.0: the level shift used in inverse iteration.\n\nExample\n\nusing Gridap\nusing FEMTISE\nusing LinearAlgebra\n\n# Define functions\np(x)=1.0\nq(x)=0.0\nr(x)=1.0\n# Define measure\nΩ=1.0:0.1:10.0\ndΩ=Gridap.CellData.CellData(Ω)\n# Define FE Spaces\nUSpace=fe_space(1,1,Ω)\nVSpace=fe_space(1,1,Ω)\n# Compute eigenvalues and eigenvectors\nϵ,ϕ=eigen_values_and_eigen_vectors(p,q,r,dΩ,USpace,VSpace)\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.eigenstates_normalization-Tuple{Vector{Gridap.CellData.CellField}, Gridap.CellData.GenericMeasure}","page":"Function Information","title":"FEMTISE.eigenstates_normalization","text":"eigenstates_normalization(ϕ,dΩ)\n\nAim\n\nCheck eigenstates normalization.\n\nArguments\n\nϕ::Vector{CellField}: array of FE eigenstates\ndΩ::Gridap.CellData.GenericMeasure: integration domain\n\nOutput\n\nnom_vector::Vector{Float64}: array of norm value for specific eigenstate\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.fe_spaces-Tuple{Any, Tuple, String}","page":"Function Information","title":"FEMTISE.fe_spaces","text":"fe_spaces(model,reff,grid_type; <keyword arguments>)\n\nAim\n\nCreate finite element (FE) spaces (Trial and Test spaces).\n\nArguments\n\nBC_type::String=\"FullDirichlet\": the type of boundary condition.\nTypeData::Type=ComplexF64: the type of data to define FE spaces.\nconf_type::Symbol=:H1: the regularity of the interpolation at the boundaries of cells in the mesh. (e.g.:L2,:H1,:C0,:Hgrad,)\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.input_data-Tuple{String}","page":"Function Information","title":"FEMTISE.input_data","text":"input_data(data_file_name)\n\nAim\n\nDefinition of input data form input.dat file using specific type structures.\n\nArguments\n\ndata_file_name::String: name of input data file\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.interpolation_eigenstates!-Tuple{Vector{Gridap.CellData.CellField}, Gridap.FESpaces.FESpace}","page":"Function Information","title":"FEMTISE.interpolation_eigenstates!","text":"interpolation_eigenstates!(eigen_states,USpace)\n\nAim\n\nInterpolate eigenstates\n\nArguments\n\neigen_states::Vector{CellField}: eigenstates\nUSpace::FESpace: FE space\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.load_input_data-Tuple{String}","page":"Function Information","title":"FEMTISE.load_input_data","text":"load_input_data(full_path_input_data)\n\nAim\n\nLoad input data from a file\n\nArguments\n\nfull_path_input_data::String: full path name to input data file\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.load_results-Tuple{InputData1D}","page":"Function Information","title":"FEMTISE.load_results","text":"load_results(id)\n\nAim\n\nLoad results from a file\n\nArguments\n\nid::InputData1D: input data\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.load_results-Tuple{InputData2D}","page":"Function Information","title":"FEMTISE.load_results","text":"load_results(id)\n\nAim\n\nLoad results from a file\n\nArguments\n\nid::InputData2D: input data\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.load_results-Tuple{InputData}","page":"Function Information","title":"FEMTISE.load_results","text":"load_results(id)\n\nAim\n\nLoad results from a file\n\nArguments\n\nid::InputData: input data\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.make_boundary_conditions-Tuple{String, String, Type}","page":"Function Information","title":"FEMTISE.make_boundary_conditions","text":"make_boundary_conditions(grid_type,BC_type,TypeData;<keyword arguments>)\n\nAim\n\nCreate boundary conditions for a given grid and type of boundary conditions\n\nArguments\n\ngrid_type::String: type of grid\nBC_type::String: type of boundary conditions\nTypeData::Type: type of data\n<keyword arguments>:\nhomogeneous::Bool=true: if boundary conditions are homogeneous\nparams::Tuple=(nothing,nothing): parameters for boundary conditions\n\nReturns\n\nBC_values::Array{TypeData,1}: values of boundary conditions\nBC_tags::Array{String,1}: tags of boundary conditions\n\nExample\n\nBC_values,BC_tags=make_boundary_conditions(\"simple_line\",\"FullDirichlet\",Float64)\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.make_model-Tuple{String, Tuple}","page":"Function Information","title":"FEMTISE.make_model","text":"make_model(grid_type,params)\n\nAim\n\nCreate a mesh model using Gmsh\n\nArguments\n\ngrid_type::String: type of grid to create\nparams::Tuple: parameters to create the grid\n\nReturns\n\nmodel::GmshDiscreteModel: mesh model\n\nReferences\n\nhttps://gitlab.onelab.info/gmsh/gmsh/blob/master/api/gmsh.jl\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.measures-Tuple{Any, Integer, Any}","page":"Function Information","title":"FEMTISE.measures","text":"measures(model,degree,tags_boundary)\n\nAim\n\nThe triangulation and integration aproximated Lebesgue measures\n\nArguments\n\nmodel: FE grid model.\ndegree::Integer: degree of quadrature rule to use in the cells of triangulation.\ntags_boundary: tags of boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.norm_l2-Tuple{Gridap.CellData.CellField, Gridap.CellData.GenericMeasure}","page":"Function Information","title":"FEMTISE.norm_l2","text":"norm_l2(𝜳,dΩ)\n\nAim\n\nCompute de L2 norm for specific FE wave function\n\nArguments\n\n𝜳::CellField: specific FE wave function\ndΩ::Gridap.CellData.GenericMeasure: integration domain\n\nOutput\n\northogonality_vector::Real: L2 norm value\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.orthogonality_check-Tuple{Vector{Gridap.CellData.CellField}, Gridap.CellData.GenericMeasure, Gridap.FESpaces.FESpace}","page":"Function Information","title":"FEMTISE.orthogonality_check","text":"orthogonality_check(ϕ,dΩ,TrialSpace)\n\nAim\n\nCheck eigenstates orthogonality. Each eigenstate is a multifield FE object.\n\nArguments\n\nϕ::Vector{CellField}: array of FE eigenstates\ndΩ::Gridap.CellData.GenericMeasure: integration domain\nTrialSpace::FESpace: Trial FE space\n\nOutput\n\northogonality_vector::Vector{Float64}: array of inner product between differents eigenstates\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.orthogonality_check-Tuple{Vector{Gridap.CellData.CellField}, Gridap.CellData.GenericMeasure}","page":"Function Information","title":"FEMTISE.orthogonality_check","text":"orthogonality_check(ϕ,dΩ)\n\nAim\n\nCheck eigenstates orthogonality\n\nArguments\n\nϕ::Vector{CellField}: array of FE eigenstates\ndΩ::Gridap.CellData.GenericMeasure: integration domain\n\nOutput\n\northogonality_vector::Vector{Float64}: array of inner product between differents eigenstates\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.read_bin-Tuple{String}","page":"Function Information","title":"FEMTISE.read_bin","text":"read_bin(fileName;<keyword arguments>)\n\nAim\n\nRead binary file\n\nArguments\n\nfileName::String: name of file data\nmatrix_data::Bool: optional boolean keyword to specify matrix or array data\nc_dim::Int: optional column number of matrix data\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.read_bin-Union{Tuple{T}, Tuple{IO, Type{T}, Int64, Bool, Int64}} where T","page":"Function Information","title":"FEMTISE.read_bin","text":"read_bin(io,::Type{T},n,matrix_data,c_dim)\n\nAim\n\nSpeeds up the read binary file\n\nArguments\n\nio::IO: in/output variable\n::Type{T}: data type\nn::Int: total number of elements in array/matrix data\nmatrix_data::Bool: boolean keyword to specify matrix or array data\nc_dim::Int: column number of matrix data\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.reduced_density-Tuple{Vector{Gridap.CellData.CellField}, Tuple{Vector{Float64}, Vector{Float64}}, Gridap.Geometry.CartesianDiscreteModel}","page":"Function Information","title":"FEMTISE.reduced_density","text":"reduced_density(ϕ,r,model)\n\nAim\n\nCompute partial probability density from set of specific wave functions (FE object)\n\nArguments\n\nphi::Vector{CellField}: array of eigenstates (array of FE objects)\nr::Tuple{Vector{Float64},Vector{Float64}}:\nx_vector::Vector{Float64}:: array values of first coordinate (first partial domain)\ny_vector::Vector{Float64}:: array values of second coordinate (second partial domain)\nmodel::CartesianDiscreteModel:: Cartesian discrete 2D model\n\nOutput\n\nresult::Tuple{Vector{Float64},Vector{Float64}}\nreduced_function_DOF1::Vector{Float64}: partial probability density of first coordinate\nreduced_function_DOF2::Vector{Float64}: partial probability density of second coordinate\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.reduced_integration-Tuple{Vector{Gridap.CellData.CellField}, Tuple{Vector{Float64}, Vector{Float64}}, Any, Gridap.CellData.GenericMeasure}","page":"Function Information","title":"FEMTISE.reduced_integration","text":"reduced_integration(FE_function,r_vector,Ω,dΩ)\n\nAim\n\nIntegration over reduced coordinate (partial domain) of specific two dimensional FE function\n\nArguments\n\nFE_function::Vector{CellField}: specific 2D FE function to integrate over partial domain.\nr_vector::Tuple{Vector{Float64},Vector{Float64}}\nx_vector::Vector{Float64}:: array values of first coordinate (first partial domain)\ny_vector::Vector{Float64}:: array values of second coordinate (second partial domain)\nOmega: Finite element domain\ndΩ::Gridap.CellData.GenericMeasure: full integration domain\n\nOutput\n\nresult::Tuple{Vector{Float64},Vector{Float64}}\nreduced_function_DOF1::Vector{Float64}: integration of 2D FE function over first partial domain.\nreduced_function_DOF2::Vector{Float64}: integration of 2D FE function over second partial domain.\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.reduced_time_indep_entropy-Tuple{Tuple{Vector{Float64}, Vector{Float64}}, Matrix{Float64}, Real}","page":"Function Information","title":"FEMTISE.reduced_time_indep_entropy","text":"reduced_time_indep_entropy(r,rho,renyi_factor)\n\nAim\n\nCompute time independent Reduced Rényi entropy for specific 2D FE wave function and Rényi factor\n\nArguments\n\nr::Tuple{Vector{Float64},Vector{Float64}}:\nx::Vector{Float64}: array values of first coordinate\ny::Vector{Float64}: array values of second coordinate\nrho::Matrix{Float64}: matrix values of probability density (where rows are rho(x) with fixed y and columns are rho(y) with fixed x)\nrenyi_factor::Float64: Rényi factor (need to be a Real number)\n\nOutput\n\nS::Tuple{Vector{Float64},Vector{Float64}}:\nSx_vector::Vector{Float64}: reduced entropy as integration over first coordinate.\nSy_vector::Vector{Float64}: reduced entropy as integration over second coordinate.\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.reduced_time_indep_entropy-Tuple{Tuple{Vector{Float64}, Vector{Float64}}, Matrix{Float64}}","page":"Function Information","title":"FEMTISE.reduced_time_indep_entropy","text":"reduced_time_indep_entropy(r,rho)\n\nAim\n\nCompute time independent Reduced Shannon entropy for specific 2D FE wave function\n\nArguments\n\nr::Tuple{Vector{Float64},Vector{Float64}}:\nx::Vector{Float64}: array values of first coordinate\ny::Vector{Float64}: array values of second coordinate\nrho::Matrix{Float64}: matrix values of probability density (where rows are rho(x) with fixed y and columns are rho(y) with fixed x)\n\nOutput\n\nS::Tuple{Vector{Float64},Vector{Float64}}:\nSx_vector::Vector{Float64}: reduced entropy as integration over first coordinate.\nSy_vector::Vector{Float64}: reduced entropy as integration over second coordinate.\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.solve-Tuple{FEMTISE.EigenProblem}","page":"Function Information","title":"FEMTISE.solve","text":"solve(prob)\n\nAim\n\nCompute eigen problem by Arpack eigs function and return eigenvalues and eigenvectors.\n\nArguments\n\nprob::EigenProblem: problem deinition\n\nReturns\n\neigenvalues::Vector{Float64}: eigenvalues\neigenvectors::Vector{CellField}: eigenvectors\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.space_coord-Tuple{Tuple, Any, Any}","page":"Function Information","title":"FEMTISE.space_coord","text":"space_coord(dom,Δr,n;<keyword arguments>)\n\nAim\n\nReturns coordinate vector (r) and discrete points (pts) for 1D or 2D spaces.\nif dimension==\"1D\" ⇒ dom=(x₁,x₂); Δr=Δx; n=nx\nif dimension==\"2d\" ⇒ dom=(x₁,x₂,y₁,y₂); Δr=(Δx,Δy); n=(nx,ny)\n\nArguments\n\ndom::Tuple: FE cartesian domain.\nΔr:: discretization of FE space.\nn:: number of FE in each direction.\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.state_population-Tuple{Vector{Gridap.CellData.CellField}, Gridap.FESpaces.FESpace, Gridap.CellData.GenericMeasure}","page":"Function Information","title":"FEMTISE.state_population","text":"state_population(psi,TrialSpace,dOmega)\n\nAim\n\nCompute the population of specific quantum state vector (2D)\n\nArguments\n\npsi::Vector{CellField}: multifield quantum state (2D)\nTrialSpace::FESpace: Trial finite element space\ndOmega::Gridap.CellData.GenericMeasure: integration domain\n\nOutput\n\nP::Tuple{Array{Float64},Array{Float64}}:\nP1::Array{Float64}: population of first state\nP2::Array{Float64}: population of second state\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.time_indep_diff_mutual_information-Tuple{Vector{Float64}, Vector{Float64}, Vector{Float64}}","page":"Function Information","title":"FEMTISE.time_indep_diff_mutual_information","text":"time_indep_diff_mutual_information(Sx,Sy,Sxy)\n\nAim\n\nCompute time independent Differential Mutual Information\n\nArguments\n\nSx::Vector{Float64}: reduced entropy associated with first coordinate\nSy::Vector{Float64}: reduced entropy associated with second coordinate\nSxy::Vector{Float64}: total entropy associated with both coordinate\n\nOutput\n\nI::Vector{Float64}: array of mutual information values\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.time_indep_entropy-Tuple{Vector{Gridap.CellData.CellField}, Gridap.FESpaces.FESpace, Gridap.CellData.GenericMeasure, Real}","page":"Function Information","title":"FEMTISE.time_indep_entropy","text":"time_indep_entropy(psi,TrialSpace,dOmega,renyi_factor)\n\nAim\n\nCompute time independent Rényi entropy for specific FE wave function and Rényi factor\n\nArguments\n\npsi::Vector{CellField}: specific FE wave function\nTrialSpace::FESpace: Trial FE space\ndOmega::Gridap.CellData.GenericMeasure: integration domain\nrenyi_factor::Real: Rényi factor (have to be a Real number)\n\nOutput\n\nS::Vector{Float64}: Array of entropy values.\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.time_indep_entropy-Tuple{Vector{Gridap.CellData.CellField}, Gridap.FESpaces.FESpace, Gridap.CellData.GenericMeasure}","page":"Function Information","title":"FEMTISE.time_indep_entropy","text":"time_indep_entropy(psi,TrialSpace,dOmega)\n\nAim\n\nCompute time independent Shannon entropy for specific FE wave function\n\nArguments\n\npsi::Vector{CellField}: specific FE wave function\nTrialSpace::FESpace: Trial FE space\ndOmega::Gridap.CellData.GenericMeasure: integration domain\n\nOutput\n\nS::Vector{Float64}: Array of entropy values.\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.triangulation_repair-Tuple{Any, String}","page":"Function Information","title":"FEMTISE.triangulation_repair","text":"triangulation_repair(model,grid_type)\n\nAim\n\nRepair triangulation\n\nArguments\n\nmodel::Model: FE grid model\ngrid_type::String: FE grid type (could be \"simple_line\" or \"Cartesian2D\")\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.uniform_trapezoidal_integration_method-Tuple{Vector, Vector}","page":"Function Information","title":"FEMTISE.uniform_trapezoidal_integration_method","text":"uniform_trapezoidal_integration_method(x_vec,fx_vec)\n\nAim\n\nNumeric integration function using trapezoidal method considering uniform discretization.\n\nArguments\n\nx_vec::Vector: integration domain (array of values)\nfx_vec::Vector: array function evaluated in integration domain\n\nOutput\n\nresult::Vector: integral value\n\nExample\n\nx=0:0.1:10;\nfx=sin.(x);\nresult=uniform_trapezoidal_integration_method(x,fx)\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.write_bin-Union{Tuple{T}, Tuple{Matrix{T}, String}} where T","page":"Function Information","title":"FEMTISE.write_bin","text":"write_bin(x,fileName;<keyword arguments>)\n\nAim\n\nWrite binary file from matrix data\n\nArguments\n\nx::Matrix{T}: matrix data\nfileName::String: name of file data\nexisting_file::Bool=false: optional boolean keyword to delete or not delete existing data\n\n\n\n\n\n","category":"method"},{"location":"function_information/#FEMTISE.write_bin-Union{Tuple{T}, Tuple{Vector{T}, String}} where T","page":"Function Information","title":"FEMTISE.write_bin","text":"write_bin(x,fileName;<keyword arguments>)\n\nAim\n\nWrite binary file from array data\n\nArguments\n\nx::Array{T,1}: array/vector data\nfileName::String: name of file data\nexisting_file::Bool=false: optional boolean keyword to delete or not delete existing data\n\n\n\n\n\n","category":"method"},{"location":"examples/simulation_example/#How-to-run-default-eigen-problems-defined-inside-FEMTISE-Package","page":"General Simulation Examples","title":"How to run default eigen problems defined inside FEMTISE Package","text":"","category":"section"},{"location":"examples/simulation_example/#Clone-FEMTISE-package-repository","page":"General Simulation Examples","title":"Clone FEMTISE package repository","text":"","category":"section"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"First of all you need to clone package from GitHub repository as follow","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"    @prompt$: cd ~/my_directory/\n    @my_directory$: git clone https://github.com/mendzmartin/FEMTISE.jl.git","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"This will download a folder called FEMTISE.jl, it is important to keep the .jl extension in the repository name. And, in case we have already cloned the repository, we must update it by running git pull.","category":"page"},{"location":"examples/simulation_example/#Simulate-predefined-potential","page":"General Simulation Examples","title":"Simulate predefined potential","text":"","category":"section"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Create a folder where you want to save simuation data, from Bash terminal write","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"    @prompt$: mkdir ~/my_folder\n    @prompt$: cd ~/my_folder\n    @my_folder$: julia\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.9.0 (2023-05-07)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"    julia> Ctrl+]\n    (@v1.9) pkg>\n    (@v1.9) pkg> activate .\n    (@v1.9) pkg> dev ~/my_directory/FEMTISE.jl\n    julia> exit()","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Then, open a Julia file @my_folder$: vi my_script.jl and write the following comands:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"    begin\n        using Pkg\n        Pkg.activate(\"./\")\n        Pkg.instantiate()\n        \n        # if you did the previous step from REPL you don't need this\n        Pkg.develop(path=\"~/my_directory/FEMTISE.jl\")\n\n        using FEMTISE;\n        \n        run_default_eigen_problem(set_type_potential())\n    end","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"After save the changes you can run the script and see de following","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"    @my_folder$: julia my_script.jl\n  Activating project at `~/my_folder`\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n####### ####### #     # #######   ###    #####  #######\n#       #       ##   ##    #       #    #     # #                     #  #\n#       #       # # # #    #       #    #       #                     #  #\n#####   #####   #  #  #    #       #     #####  #####                 #  #\n#       #       #     #    #       #          # #         ###         #  #\n#       #       #     #    #       #    #     # #         ###    #    #  #\n#       ####### #     #    #      ###    #####  #######   ###     ####   ######\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nThe type of default potential can be:\n   - Unidimensional Quantum Harmonic Oscillator            --> set (1)\n   - Unidimensional Symmetric Finit Kronig-Penney          --> set (2)\n   - Unidimensional Finite Well Potential                  --> set (3)\n   - Bidimensional Isotropic Quantum Harmonic Oscillator   --> set (4)\n   - Ad hoc potential from input file                      --> set (5)\nPlease, set some number to specify the type potential:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Then you can specify the set number to run a specific potential. Then the running is interactive so in each step you need to configurate the potential and simulation properties.","category":"page"},{"location":"examples/simulation_example/#1D-Harmonic-Oscillator-Example","page":"General Simulation Examples","title":"1D Harmonic Oscillator Example","text":"","category":"section"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Just to show how we can simulate the Unidimensional Quantum Hamonic Oscillator we need to specify befor the set number 1, then the properties to configurate are like following:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nSet full path name (e.g: \"./my_directory/my_name\") where you want to write problem results \nand press Enter = ./qho1d\nMandatory input data\nNumber of eigenvalues: nev::Int = 10\nFinite element domain length [au] (default L=30.0 press Enter): L::Float64 = \nSet domain type (for symetric domain {-L/2,L/2} set \"s\" and for non-symetric domain {0,L} \nset \"ns\": dom_type::String = s\nFinite element size [au] (default Δx=0.1 press Enter): Δx::Float64 = \nHarmonic Oscillator frecuency [au]: ω::Float64 = 1\nHarmonic Oscillator center [au]: x₁::Float64 = 0\nLevel shift used in inverse iteration [au] (default sigma=0.0 press Enter): sigma::Float64 \n= 0\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n... Running ...\nBuilding the grid model ...\nInfo    : Meshing 1D...\nInfo    : Meshing curve 1 (Line)\nInfo    : Done meshing 1D (Wall 0.000265359s, CPU 0.000267s)\nInfo    : 301 nodes 302 elements\nInfo    : Writing './model1D.msh'...\nInfo    : Done writing './model1D.msh'\nInfo    : Reading './model1D.msh'...\nInfo    : 3 entities\nInfo    : 301 nodes\nInfo    : 302 elements\nInfo    : Done reading './model1D.msh'\nSolving eigen problem ...\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nTransforming data from FE object to complex value...\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nMoving result data to trash if data exists ...\nSaving data ...\nSaved data.\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nMoving result data to trash if data exists ...\nSaving data ...\nSaved data.\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nMoving result data to trash if data exists ...\nSaving data ...\nSaved data.","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Note that if we don't specify explicit data we choose the default propertie. Finally the output are four files called:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"    @my_folder$: ls *.dat\nqho1d_eigen_problem_attributes.dat \n    @my_folder$: ls *.bin\nqho1d_coordinates.bin  qho1d_eigen_values.bin  qho1d_eigen_vectors.bin","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"and we note that the results are in binary otuput data file and the attributes of simulation are inside data file (see bellow the file information).","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"    @my_folder$: cat qho1d_eigen_problem_attributes.dat","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Quantum Harmonic Oscillator 1D\nDimension of eigen value problem              dimension::String   = 1D\nNumber of eigenvalues                         nev::Int          = 10\nFinite element domain length [au]             L::Float64          = 30.0\nDomain type                                   dom_type::String    = s\nLevel shift used in inverse iteration [au]    sigma::Float64      = 0.0\nFinite element size [au]                      Δx::Float64         = 0.1\nHarmonic Oscillator frecuency [au]            ω::Float64          = 1.0\nHarmonic Oscillator center [au]               x₁::Float64         = 0.0\n\nNumber of threads                                                           = 4","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Be carefull when you set the numbers 5 or 6 because you need to do a little more steps before to run over this simulations (see the next).","category":"page"},{"location":"examples/simulation_example/#Simulate-custom-potential","page":"General Simulation Examples","title":"Simulate custom potential","text":"","category":"section"},{"location":"examples/simulation_example/#Definitons-of-specific-potentials","page":"General Simulation Examples","title":"Definitons of specific potentials","text":"","category":"section"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"First you need to create a folder called adhoc_potential like this","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"    @my_folder$: mkdir ./adhoc_potential\n    @my_folder$: cd ./adhoc_potential","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Inside adhoc_potentials/ folder we need to create a Julia file with name my_julia_file.jl where we can find custom potential functions in specific format.","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Inside our my_julia_file.jl folder the format to write custom potential function need to be like follows:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Unidimensional potential","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"    export my_potential_1d\n    function my_potential_1d(x,params::Tuple)\n        λ₁,λ₂,λ₃...=params\n        return f(x[1],λ₁,λ₂,λ₃...)\n    end","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Here params is a Tuple with potential parameters (can be Integers, Floats, Complex, etc) and f(x[1],λ₁,λ₂,λ₃...) is an expresion(function) of x[1] (unidmensional DOF) and λᵢ's (parameters).","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Bidimensional potential","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"    export my_potential_2d\n    function my_potential_2d(x,params::Tuple)\n        λ₁,λ₂,λ₃...=params\n        return f(x[1],x[2],λ₁,λ₂,λ₃...)\n    end","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Here params is a Tuple with potential parameters (can be Integers, Floats, Complex, etc) and f(x[1],x[2],λ₁,λ₂,λ₃...) is an expresion(function) of x[1] (unidmensional DOF), x[2] (unidmensional DOF) and λᵢ's (parameters).","category":"page"},{"location":"examples/simulation_example/#Building-input-data-for-custom-potential-simulations","page":"General Simulation Examples","title":"Building input data for custom potential simulations","text":"","category":"section"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"In some specific folder we need to create a data folder @my_folder$: vi my_input.dat with custom potential input information behing the following format:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"full_path_name              = ##########\ndom_type                    = ##########\nnev                         = ##########\ndimension                   = ##########\nsigma                       = ##########\nadhoc_file_name             = ##########\npotential_function_name     = ##########\nparams_potential_types      = ##########\nparams_potential            = ##########\nanalysis_param              = ##########\noutput_format_type          = ##########\n## ONLY FOR 1D EIGENPROBLEMS\nL                           = ##########\nΔx                          = ##########\n## ONLY FOR 2D EIGENPROBLEMS\nLx                          = ##########\nLy                          = ##########\nnx                          = ##########\nny                          = ##########\ndifferent_masses            = ##########\nreduced_density             = ##########","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"where we use ########## to symbolize that we need to set an specific configuration of parameters on that place.","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"WARNING: Please obey the format structure of input data. ","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"","category":"page"},{"location":"examples/simulation_example/#Giving-more-details","page":"General Simulation Examples","title":"Giving more details","text":"","category":"section"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Here we give more details (including examples) about how to configurate input data file:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"full_path_name::String: Full path name where you want to write problem results. Beware of whitespace between data values and do not use spaces in variables named. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"full_path_name = ~/my_folder/adhoc_potential\nfull_path_name = ./adhoc_potential","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"dom_type::String: Domain type. Can set s for symetric domain or ns for non-symetric domain. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"dom_type = s\ndom_type = ns","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"nev::Integer: Number of eigenvalues. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"nev = 10","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"dimension::String: Dimension of eigen value problem. Can set 1D for unidimensonal problems or 2D for bidimensional problems. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"dimension = 1D\ndimension = 2D","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"sigma::Real: Level shift used in inverse iteration to compute only a subset of eigen pair. Sigma is an specific energy (in atomic units) where we want to centre de eigen problem. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"sigma = -10.0\nsigma = 100.0","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"adhoc_file_name::String: Julia file name with ad hoc potential. Beware of whitespace between data values and do not use spaces in variables named. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"adhoc_file_name = my_julia_file","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"potential_function_name::String: Name of ad hoc potential function. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"potential_function_name = my_potential_1d\npotential_function_name = my_potential_2d","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"params_potential_types: Parameter types of adhoc potential function. Can set f for float type, i for integer type or c for complex type. Use space character to separate differents types. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"params_potential_types = f f f\nparams_potential_types = i i f","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"params_potential: Parameter values of ad hoc potential function. Need to be consistent with parameter types. Use space character to separate differents values. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"params_potential = 1.0 0.1 10.0\nparams_potential  = -5 1 -1.54","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"analysis_param: Setting if you want an analysis parameter simulation or not. Set analysis_param::Tuple = λindex::Integer λi::T λf::T Δλ::T only if want to modify an specific parameter from paramspotential. Use space character to separate differents values. Also you can set `analysisparam::Bool = false` if you don't want any parametric analysis simulation. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"analysis_param = 2 0.0 0.1 0.01\nanalysis_param = 5 -5 10 1\nanalysis_param = false","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"output_format_type::Tuple: Setting what type fo format do you want for output results and whta type of data do you want to write. For first property set bin if you want a binary output format or jld2 if you want a JLD2 output format. For second property set eigen if you want to save only eigenenergies and eigenstates or all if you want to save all finite element objects (only activate for jld2 format) Set E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"output_format_type = bin eigen\noutput_format_type = jld2 eigen\noutput_format_type = jld2 all","category":"page"},{"location":"examples/simulation_example/#Unidimensional-problems","page":"General Simulation Examples","title":"Unidimensional problems","text":"","category":"section"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Only use if you set dimension = 1D","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"L::Float: Set the lenght of finite element domain in atomic unit system. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"L = 100.0","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Δx::Float: Set discretization size of finite elements (for default potential simulation you can set uniform grid). E.g:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Δx = 0.1","category":"page"},{"location":"examples/simulation_example/#Bidimensional-problems","page":"General Simulation Examples","title":"Bidimensional problems","text":"","category":"section"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Only use if you set dimension = 2D","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Lx::Float: set finite element domain length of x direction in atomic unit system. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Lx = 100.0","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Ly::Float: set finite element domain length of y direction in atomic unit system. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Ly = 50.0","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"nx::Integer: set number of finite element of x direction. E.g:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"nx = 100","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"nx::Integer: set number of finite element of y direction. E.g:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"ny = 50","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"different_masses: set if you want to consider different masses or not. Set different_masses::Float = mass2_value if you want to consider another mass value for second DOF in atomic unit system. The mass associated with DOF1 has a value of 1 [au]. Set different_masses::Bool = false if you want the same mass values of DOFs (two unidimensional particles or one bidimensional particle). E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"different_masses = 5.0\ndifferent_masses = false","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"reduced_density::Bool: set true if you want to compute reduced densities or false if not. E.g.:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"reduced_density = true\nreduced_density = false","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"","category":"page"},{"location":"examples/simulation_example/#Running-an-input-data-file","page":"General Simulation Examples","title":"Running an input data file","text":"","category":"section"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Then you can run the script and set option 5 like this:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"    @my_folder$: julia my_script.jl\n  Activating project at `~/my_folder`\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n####### ####### #     # #######   ###    #####  #######\n#       #       ##   ##    #       #    #     # #                     #  #\n#       #       # # # #    #       #    #       #                     #  #\n#####   #####   #  #  #    #       #     #####  #####                 #  #\n#       #       #     #    #       #          # #         ###         #  #\n#       #       #     #    #       #    #     # #         ###    #    #  #\n#       ####### #     #    #      ###    #####  #######   ###     ####   ######\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nThe type of default potential can be:\n   - Unidimensional Quantum Harmonic Oscillator            --> set (1)\n   - Unidimensional Symmetric Finite Kronig-Penney         --> set (2)\n   - Unidimensional Finite Well Potential                  --> set (3)\n   - Bidimensional Isotropic Quantum Harmonic Oscillator   --> set (4)\n   - Ad hoc potential from input file                      --> set (5)\nPlease, set some number to specify the type potential: 5\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\nSet full path name (e.g: \"./my_directory/my_input_data\") where the data is specified and \npress Enter = ./my_input","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Where we were specified the full path name of our input data. Also, we can specify this full path name inside Julia script like following:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"First open script file @my_folder$: vi my_script.jl and write the following comands:","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"    begin\n        using Pkg\n        Pkg.activate(\"./\")\n        Pkg.instantiate()\n        \n        using FEMTISE;\n        \n        path_input_data = \"./my_input\"\n        run_default_eigen_problem(set_type_potential(path_input_data))\n    end","category":"page"},{"location":"examples/simulation_example/","page":"General Simulation Examples","title":"General Simulation Examples","text":"Then you can run the script @my_folder$: julia my_script.jl and wait for simulation results.","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/#Tutorial-To-Simulate-Isotropic-One-Dimensional-Harmonic-Oscillator","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Tutorial To Simulate Isotropic One Dimensional Harmonic Oscillator","text":"","category":"section"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/#Create-simulation-directory","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Create simulation directory","text":"","category":"section"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"First of all we need to create a specific directory to save this specific simulation results ","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"@prompt:~$ mkdir ~/my_directory_path/QHO1D\n@prompt:~$ cd ~/my_directory_path/QHO1D","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/#Create-function-potential","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Create function potential","text":"","category":"section"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"We need to create a specific function potential for quantum harmonic oscillator 1D as following:","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"@prompt:~/my_directory_path/QHO1D$ vi adhoc_potential_function.jl","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"Inside adhoc_potential_function write the following:","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"export qho_1d\n\"\"\"\n    qho_1d(x,params)\n\n# Aim: \n    This function is a simple implementation of the 1D quantum harmonic oscillator \n    potential. \n    It is used to test the simulation of the isotropic quantum harmonic oscillator in 1D.\n\n# Arguments\n    x::Array{Float64,1} : The position of the particle in 1D.\n    params::Tuple : A tuple containing the parameters of the potential. \n        params[1]::Float64 : The frequency of the oscillator.\n        params[2]::Float64 : The position of the minimum of the potential.\n\n# Returns\n    Float64 : The value of the potential at the position x.\n\"\"\"\nfunction qho_1d(x,params::Tuple)\n    ω,x₁=params\n    return 0.5*(ω*ω)*((x[1]-x₁)*(x[1]-x₁))\nend","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/#Input-file","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Input file","text":"","category":"section"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"We need to create an input file to simulate using default solver function inside FEMTISE package","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"@prompt:~/my_directory_path/QHO1D$ vi input.dat","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"Inside input.dat we need to write the following.","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"full_path_name              = ~/my_directory_path/QHO1D/name_output_file\ndom_type                    = s\nnev                         = 10\ndimension                   = 1D\nsigma                       = 0.0\nadhoc_file_name             = ~/my_directory_path/QHO1D/adhoc_potential_function\npotential_function_name     = qho_1d\nparams_potential_types      = f f\nparams_potential            = 1.0 0.0\nanalysis_param              = false\noutput_format_type          = jld2 all\n## ONLY FOR 1D EIGENPROBLEMS\nL                           = 100\nΔx                          = 0.1\n## ONLY FOR 2D EIGENPROBLEMS\nLx                          = \nLy                          = \nnx                          = \nny                          = \ndifferent_masses            = \nreduced_density             = ","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/#Run-script","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Run script","text":"","category":"section"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"Create Julia code as","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"@prompt:~/my_directory_path/QHO1D$ vi run.jl","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"Inside run.jl we need to write the following.","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"begin\n    using Pkg\n    Pkg.activate(\"~/my_directory_path/QHO1D/\")\n    develop_package = true; develop_package ? Pkg.develop(path=\"~/my_path_repo/FEMTISE.jl\") \n    : nothing\n    Pkg.instantiate()\n    using FEMTISE;\n    run_default_eigen_problem(set_type_potential(\"~/my_directory_path/QHO1D/input.dat\"))\nend","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"After this we can run the simulation using Julia compiler (for example: using multithread running with four threads)","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"@prompt:~/my_directory_path/QHO1D$ julia -t 4 run.jl ","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/#Analysis","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Analysis","text":"","category":"section"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"After running we obtain an output data file in jld2 format called name_output_file_eigen_data.jld2.","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"Then using Jupyter Notebook (by intermediate Visual Studio Code) we can analyse output file so:","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"@prompt:~/my_directory_path/QHO1D$ code QHO1D.ipynb","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"Inside QHO1D.ipynb we need to write the following:","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/#Environment","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Environment","text":"","category":"section"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"Activate Julia environment","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"using Pkg\nPkg.activate(\"~/my_directory_path/QHO1D/\")\nPkg.instantiate()","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"Is necessary to mark FEMTISE package as developed package using specific path repository:","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"develop_package = true; develop_package ? Pkg.develop(path=\"~/my_path_repo/FEMTISE.jl\") : nothing","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"Now we install package (if it is nesseary) and use specific packages to analyse output data:","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"install_pkg = true\nif install_pkg\n    Pkg.add(\"Plots\")\n    Pkg.add(\"PlotlyJS\")\nend\nusing FEMTISE;\nusing Plots;","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/#Read-output-data","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Read output data","text":"","category":"section"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"All the information that we need to specify is where we find input file then using specific functions we can collect output data","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"path_input_file_name=\"~/my_directory_path/QHO1D/input.dat\"\nsimulation_info, output_data = collect_result_data(true,path_input_file_name)","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/#Plotting-figures","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Plotting figures","text":"","category":"section"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"Defining functions to plot data as following:","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"\"\"\"\n    plot_eigenvalues(id,results;<keyword arguments>)\n\n# Aim\n- Plot the eigenvalues of the Hamiltonian operator.\nThe eigenvalues are obtained from the diagonalization of the Hamiltonian operator.\nThe keyword arguments are used to set the title, xlabel, ylabel, and legend of the plot.\n\n# Arguments\n- `id`: InputData or InputData1D or InputData2D object.\n- `results`: Results object.\n- `keyword arguments`:\n    - `set_title::String`: Title of the plot.\n    - `set_xlabel::String`: Label of the x-axis.\n    - `set_ylabel::String`: Label of the y-axis.\n    - `set_legend::Symbol`: Position of the legend.\n\"\"\"\nfunction plot_eigenvalues(id,results;\n    set_title::String=\"\",\n    set_xlabel::String=\"Energy level (n)\",set_ylabel::String=\"Eigen-energies (ϵn [au])\",\n    set_legend::Symbol=:bottomright)\n    if id.analysis_param == false\n        plotlyjs()\n        figure = scatter(real(results.ϵ),title=set_title,xlabel=set_xlabel,\n        ylabel=set_ylabel,legend=set_legend)\n    else\n        println(\"PLOT ERROR.\")\n        println(\"Check attributes, you are using the wrong function method. Analysis \n        parameter is activated.\")\n        figure = nothing\n    end\n    return figure\nend\n\n\"\"\"\n    plot_eigenstates(id,results,range_to_show;<keyword arguments>)\n\n# Aim\n- Plot the eigenstates of the Hamiltonian operator.\nThe eigenstates are obtained from the diagonalization of the Hamiltonian operator.\nThe eigenstates are plotted for the range of energy levels specified by the range_to_show \nvariable.\nThe keyword arguments are used to set the title, xlabel, ylabel, and legend of the plot.\n\n# Arguments\n- `id`: InputData or InputData1D or InputData2D object.\n- `results`: Results object.\n- `range_to_show::StepRange{Int, Int}`: Range of energy levels to plot.\n- `keyword arguments`:\n    - `set_xlabel::String`: Label of the x-axis.\n    - `set_ylabel::String`: Label of the y-axis.\n\"\"\"\nfunction plot_eigenstates(id,results,range_to_show::StepRange{Int, Int};\n    set_xlabel::String=\"Coordinate (x [au])\",set_ylabel::String=\"Probability density (ρ(x))\n    \")\n    if id.params.dimension == \"1D\"\n        plotlyjs();\n        figure = plot()\n        rho=zeros(Float64,length(results.r))\n        Threads.@threads for i in range_to_show\n            if ((typeof(id) <: InputData) || (typeof(id) <: InputData1D && id.\n            output_format_type == (\"bin\",\"eigen\")))\n                rho=real.(conj.((results.ϕ)[:,i]).*((results.ϕ)[:,i]))\n            elseif (typeof(id) <: InputData1D && id.output_format_type in [(\"jld2\",\"eigen\"),\n            (\"jld2\",\"all\")])\n                rho = real.(conj.((results.ϕ[i]).(results.pts)).*((results.ϕ[i]).(results.\n                pts)))\n            end\n            figure = plot!(results.r,rho,lw=2,lc=:black,label=\"\")\n            figure = scatter!(results.r,rho,label=\"n=$(i)\",lw=0.1)\n        end\n        figure = plot!(xlabel=set_xlabel,ylabel=set_ylabel,ticks=:native)\n    else\n        println(\"PLOT ERROR.\")\n        println(\"Check attributes, you are using the wrong function method. 2D dimension \n        problem is activated.\")\n        figure = nothing\n    end\n    return figure\nend","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"Now we can plot eigenenergies:","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"fig1 = plot_eigenvalues(simulation_info, output_data)\ndisplay(fig1)","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"(Image: figure)","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"and eigenfunctions:","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"range_to_show=range(1,step=1,length=3)\nfig2 = plot_eigenstates(simulation_info, output_data,range_to_show)\ndisplay(fig2)","category":"page"},{"location":"examples/isotropic_1d_harmonic_oscillator_potential/","page":"Isotropic 1D Quantum Harmonic Oscillator Potential","title":"Isotropic 1D Quantum Harmonic Oscillator Potential","text":"(Image: figure)","category":"page"},{"location":"math_fundation/#FEMTISE.jl:-A-High-Performance-Julia-Package-for-Time-Independent-Schrödinger-Equation-by-Finite-Element-Method","page":"Introduction","title":"FEMTISE.jl: A High Performance Julia Package for Time-Independent Schrödinger Equation by Finite Element Method","text":"","category":"section"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"Méndez, Martín¹² & Pont, Federico M.¹²","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"¹Instituto de Física Enrique Gaviola (IFEG-FAMAF-CONICET)","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"²Facultad de Matemática, Astronomía, Física y Computación (FAMAF), Universidad Nacional de Córdoba (UNC), 5000, Córdoba, Argentina","category":"page"},{"location":"math_fundation/#Abstract","page":"Introduction","title":"Abstract","text":"","category":"section"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"FEMTISE.jl is a package to resolve Time-Independent Schrödinger Equation (TISE) by Finit Element Method (FEM). This is an implementation and extension over GRIDAP.jl package using high performance protocol. The package is under constructions and currently can solve one and two dimensional problems for arbitrary potentials.","category":"page"},{"location":"math_fundation/#Statement-of-need","page":"Introduction","title":"Statement of need","text":"","category":"section"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"FEMTISE allows solving the TISE in one-dimensional and two-dimensional systems. However, it is possible to extend the package to solve systems of arbitrary dimensions (by adapting existing functions in the GRIDAP.jl package to create multidimensional cartesian grids). By using FEM to solve TISE, and because this is a variational method, we ensure that the numerically calculated ground state energy is bounded from below by its theoretical value. Additionally, it allows for quickly solving the TISE using an input file that defines arbitrary potentials. Another very valuable feature is that it enables the calculation of how eigenenergies of a Hamiltonian change when varying any potential parameter.","category":"page"},{"location":"math_fundation/#Capability-of-the-package","page":"Introduction","title":"Capability of the package","text":"","category":"section"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"This package is under construction and is focus to resolve the TISE over high performance protocol using functions from GRIDAP.jl package. Main specific features of the package are: possibility of multi-thread parallelization; solver function for usual potential (e.g.: one and two dimensional quantum harmonic oscillator, one dimensional finite well potential and symmetric finite one dimensional Kronig-Penney potential); compute eigenvalue as a function of arbitrary potential parameter; solver function for two particles problems with different masses; and involve JLD2 output format which allow us keep going the simulation or binary output which allow us write result data as value arrays to post-processing.","category":"page"},{"location":"math_fundation/#Weak-formulation-and-eigenvalue-problem-(Galerkin-Method)","page":"Introduction","title":"Weak formulation and eigenvalue problem (Galerkin Method)","text":"","category":"section"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"Considering the TISE we have hatHketpsi  =epsilon ketpsi  in coordinate representation we could write the equation by their Sturm-Liouville form as","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"underbracehatHketpsi  =epsilon ketpsi _mathrmTISE Rightarrow overbrace-nabla cdotp ( pnabla psi ) +qpsi =lambda rpsi ^mathrmSturm-Liouville text  if  hatH =-frachbar^22mnabla^2 +V( r) Rightarrow begincases p( x) =frachbar ^22m(  0) q( x) =V( r) r( x) =1(  0) endcases","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"For a variational problem first we approximate the wave function psi in mathcalH by a function uin U_mathrmtrial (where mathcalH is a Hilbert space of infinite dimension in principle and where U_mathrmtrial is a approximate space of finite dimension for mathcalH) and multiplying the PDE by a test function vin V_mathrmspaceleft( C^1right) (notice that we don't need that v satisfy some boundary condition) and integrating over Omega using the Green formula which says","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"int _Omega ( partial _j h) gdx=-int _Omega  h( partial _j g) dx+int _partial Omega =Gamma  hgn_j ds","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"where n_j =vecn cdotp e_j is the j-th of vecn on the canonical base of mathbbR^d. So","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"-nabla cdotp ( pnabla psi ) +qpsi =lambda rpsi mathrm (mathrmin  Omega )  mathrmwith  begincases psi Bigl_partial Omega =Gamma  =0  (mathrmDirichlet  mathrmBC) fracpartial psi partial nBigl_partial Omega =Gamma =nabla psi cdotp vecn=c  (mathrmNeumann  mathrmBC) endcases Rightarrow -int _Omega  nabla cdotp ( pnabla u) vdOmega +int _Omega  quvdOmega =int _Omega  lambda ruvdOmega","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"Note: In some cases this method is equivalent to Rayleigh-Ritz method, that is, the Galerkin method is more general but both came from functional minimization.","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"if begincases g=v  Rightarrow partial g=nabla v partial h=nabla cdotp ( pnabla u)  Rightarrow h=( pnabla u) endcases then","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"Rightarrow int _Omega  p( nabla ucdotp nabla v) dOmega -int _Gamma p(nabla ucdotp vecn)vdGamma  +int _Omega  quvdOmega = lambda int _Omega  ruvdOmega","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"and the problem to resolve would be like a( uv) =lambda b( uv) where we had defined ","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"a( uv) =int _Omega  p( nabla ucdotp nabla v) +quv dOmega -int _Gamma p(nabla ucdotp vecn)vdGamma   b( uv) =int _Omega  ruvdOmega","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"Note: The integral over Gamma boundary will avoid if we are considering Dirichlet's boundary conditions or has a fixed value is we are considering Neumann's boundary conditions.","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"Now, we resolve the eigenvalue problem using the ARPACK package building affine operators (each affine operator has associated one matrix and one vector) like","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"begincases a( uv) =0mathrmxrightarrowaffine operatorassociatedAvecalpha  b( uv) =0mathrmxrightarrowaffine operatorassociatedBvecbeta  endcases Rightarrow Avecphi  =lambda Bvecphi ","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"here u and v functions are such that uin U_mathrmtrial vin V_mathrmspace where U_mathrmtrial and V_mathrmspace are finite spaces which approximate the infinite Hilbert spaces where live psi and psi^*.","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"If we consider a base mathcalB =phi _j( x)_j=1^N, which expand all of the space U_mathrmtrial, we have u and v function which could be approximated (expanded in UV) as","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"mathcalB_UV =phi _j( x)_j=1^N Rightarrow f( x) =sumlimits _j=1^N c_j phi _j( x)  Rightarrow sum _ij=1^N c_i c_jleftintlimits _x_i^x_f p( x)fracdphi _i( x)dxfracdphi _j( x)dx dx +intlimits _x_i^x_f q( x) phi _i( x) phi _j( x) dxright = dots  dots = lambda sum _ij=1^N c_i c_jleftintlimits _x_i^x_f r( x) phi _i( x) phi _j( x) dxright Rightarrow hatAvecPhi  =lambda (hatBvecPhi )","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"and defining following affine matrices","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"A_ij = intnolimits _x_i^x_f p( x)fracdphi _i( x)dxfracdphi _j( x)dx dx+intnolimits _x_i^x_f q( x) phi _i( x) phi _j( x) dx  B_ij = intnolimits _x_i^x_f r( x) phi _i( x) phi _j( x) dx","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"and noting that we are solving at the end is a generalized eigenvalue problem with the form hatAvecPhi  =lambda (hatBvecPhi ).","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"The computing problem implementation is resolved by ARPACK package (using LAPACK and BLAS libraries) which give us the possibility to compute only a subset of ordered pair (eigenvalue,eigenvector) like following (this method is called Shift-Invert mode):","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"If (vecPhi  lambda ) is a eigenpair for (hatA hatB) matrices and sigma neq lambda then","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"underbrace(hatA -sigma hatB)^-1hatB cdotp vecPhi  =vecnu  cdotp vecPhi _mathrmShift-Invert mode  nu _j =frac1( lambda -sigma )","category":"page"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"this allow us to transform the original eigenvalue problem to another one with different eigenvalues, where those lambda approx sigma will have maximum nu _j values.","category":"page"},{"location":"math_fundation/#References","page":"Introduction","title":"References","text":"","category":"section"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"Sun, J. and Zhou, A., 2016. Finite element methods for eigenvalue problems. Chapman and Hall/CRC.\nLehoucq, R.B., Sorensen, D.C. and Yang, C., 1998. ARPACK users' guide: solution of large-scale eigenvalue problems with implicitly restarted Arnoldi methods. Society for Industrial and Applied Mathematics.\nVerdugo, F. and Badia, S., 2022. The software design of Gridap: a finite element package based on the Julia JIT compiler. Computer Physics Communications, 276, p.108341.","category":"page"},{"location":"math_fundation/#Implementation-of-FEMTISE-package","page":"Introduction","title":"Implementation of FEMTISE package","text":"","category":"section"},{"location":"math_fundation/","page":"Introduction","title":"Introduction","text":"Here you can see the specific implementation of solve function to resolve eigen value problems.","category":"page"},{"location":"guide_information/#**How-we-can-use-FEMTISE-package-?**","page":"Guide Information","title":"How we can use FEMTISE package ?","text":"","category":"section"},{"location":"guide_information/#**1.-Clone-FEMTISE-package**","page":"Guide Information","title":"1. Clone FEMTISE package","text":"","category":"section"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"First we need to clone package from GitHub repository as follow","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"    @prompt$: cd ~/my_directory/\n    @my_directory$: git clone https://github.com/mendzmartin/FEMTISE.jl.git","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"This will download a folder called FEMTISE.jl, it is important to keep the .jl extension in the repository name. And, in case we have already cloned the repository, we must update it by running git pull.","category":"page"},{"location":"guide_information/#**2.-Build-Julia-code-to-use-FEMTISE-package**","page":"Guide Information","title":"2. Build Julia code to use FEMTISE package","text":"","category":"section"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"    @prompt$: mkdir ~/my_folder\n    @prompt$: cd ~/my_folder\n    @my_folder$: julia\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.9.0 (2023-05-07)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"    julia> Ctrl+]\n    (@v1.9) pkg>\n    (@v1.9) pkg> activate .\n    (@my_folder) pkg> instantiate\n    (@my_folder) pkg> dev ~/my_directory/FEMTISE.jl\n    julia> exit()","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"then build Julia code with following structure:","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"module MyModule\n\nusing Pkg\nPkg.activate(\"./\")\nPkg.instantiate()\n\nusing FEMTISE\n\n#=\n... ...\n    code block where we use function\n    from FEMTISE package\n... ....\n=#\n\nend","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"Then we save de Julia code below name MyModule.jl. After that, we can run the code doing this","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"    @my_directory$: julia MyModule.jl","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"Also, if we have activated multi-thread configuration we can use the next command to activate parallelism:","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"    @my_directory$: julia -t 4 MyModule.jl","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"where we have specified 4 threads as parallelization.","category":"page"},{"location":"guide_information/#Run-from-Julia-REPL","page":"Guide Information","title":"Run from Julia REPL","text":"","category":"section"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"We can also run the package directly from Julia REPL by opening the terminal Ctrl+Alt+T inside the package folder and typing the following commands inside the terminal:","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"    @prompt$: cd my_directory/FEMTISE.jl/\n    @FEMTISE.jl$: julia\n               _\n   _       _ _(_)_     |  Documentation: https://docs.julialang.org\n  (_)     | (_) (_)    |\n   _ _   _| |_  __ _   |  Type \"?\" for help, \"]?\" for Pkg help.\n  | | | | | | |/ _` |  |\n  | | |_| | | | (_| |  |  Version 1.9.0 (2023-05-07)\n _/ |\\__'_|_|_|\\__'_|  |  Official https://julialang.org/ release\n|__/                   |","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"    julia> Ctrl+]\n    (@v1.9) pkg>\n    (@v1.9) pkg> activate .\n    (@my_folder) pkg> instantiate\n    (@my_folder) pkg> dev ~/my_directory/FEMTISE.jl\n    julia> using FEMTISE","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"and then we can, for example, access Julia's help mode to ask for specific package functions such as the following:","category":"page"},{"location":"guide_information/","page":"Guide Information","title":"Guide Information","text":"    julia> Shift+?\n    help?> space_coord\n    search: space_coord\n\n    if dimension==\"1D\" ⇒ dom=(x₁,x₂); Δr=Δx; n=nx\n    if dimension==\"2d\" ⇒ dom=(x₁,x₂,y₁,y₂); Δr=(Δx,Δy); n=(nx,ny)","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/#Tutorial-To-Simulate-Coulomb-2D-Interaction-potential-(Helium-atom-model)","page":"Two-Electrons Coulomb Interaction Potential","title":"Tutorial To Simulate Coulomb 2D Interaction potential (Helium atom model)","text":"","category":"section"},{"location":"examples/coulomb_interaction_2d_potential/#Create-simulation-directory","page":"Two-Electrons Coulomb Interaction Potential","title":"Create simulation directory","text":"","category":"section"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"First of all we need to create a specific directory to save this specific simulation results ","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"@prompt:~$ mkdir ~/my_directory_path/C2D\n@prompt:~$ cd ~/my_directory_path/C2D","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/#Create-function-potential","page":"Two-Electrons Coulomb Interaction Potential","title":"Create function potential","text":"","category":"section"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"We need to create a specific function potential for coulomb potential interaction as following:","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"@prompt:~/my_directory_path/C2D$ vi adhoc_potential_function.jl","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Inside adhoc_potential_function write the following:","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"distance(DOF1,DOF2)=abs(DOF2-DOF1)\n\neffective_interaction(DOF) = exp(DOF^2)*erfc(DOF)\nasymptotical_interaction(DOF) = 1.0/(sqrt(π)*DOF)\n\nfunction avoided_divergence(DOF,b)\n    DOF > 25.7 ? func=asymptotical_interaction(DOF+b) : func=effective_interaction(DOF+b)\n    return func\nend\n\nfunction reduced_confinement_function(DOF1,DOF2,confinement_length,Yukawa_length,\natomic_number)\n    a=atomic_number*π*sqrt(π)*0.5*(1.0/confinement_length);\n    b=confinement_length*0.5*(1.0/abs(Yukawa_length));\n    coordinate=distance(DOF1,DOF2)*(1.0/confinement_length);\n    return a*exp((-2.0*coordinate+b)*b)*avoided_divergence(coordinate,b)\nend\n\nexport effective_Yukawa_potential_2e\n\"\"\"\n    effective_Yukawa_potential_2e(x,params)\n\n# Aim:\n    This function calculates the effective Yukawa potential between two electrons in a 1D \n    system. \n    The potential is calculated using the reduced confinement function and the avoided \n    divergence function.\n\n# Arguments\n    x::Array{Float64,1} : The position of the two electrons in 1D.\n    params::Tuple : A tuple containing the parameters of the potential. \n        params[1]::Float64 : The confinement length of the potential.\n        params[2]::Float64 : The Yukawa length of the potential.\n        params[3]::Float64 : The position of the nuclei.\n        params[4]::Float64 : The atomic number of the nuclei.\n        params[5]::Float64 : The switch factor of the potential.\n\n# Returns\n    Float64 : The value of the effective Yukawa potential at the position x.\n\"\"\"\nfunction effective_Yukawa_potential_2e(x,params::Tuple)\n    confinement_length,Yukawa_length,nuclei_coord,atomic_number,switch_factor=params;\n    return (switch_factor*(reduced_confinement_function(x[1],x[2],confinement_length,\n    Yukawa_length,1.0)\n    -reduced_confinement_function(x[1],nuclei_coord,confinement_length,Yukawa_length,\n    atomic_number)\n    -reduced_confinement_function(nuclei_coord,x[2],confinement_length,Yukawa_length,\n    atomic_number)))\nend","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/#Input-file","page":"Two-Electrons Coulomb Interaction Potential","title":"Input file","text":"","category":"section"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"We need to create an input file to simulate using default solver function inside FEMTISE package","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"@prompt:~/my_directory_path/C2D$ vi input.dat","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Inside input.dat we need to write the following.","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"full_path_name              = ~/my_directory_path/C2D/name_output_file\ndom_type                    = s\nnev                         = 50\ndimension                   = 2D\nsigma                       = -10.0\nadhoc_file_name             = ~/my_directory_path/C2D/adhoc_potential_function\npotential_function_name     = effective_Yukawa_potential_2e\nparams_potential_types      = f f f f f\nparams_potential            = 1.0 100.0 0.0 2 1.0\nanalysis_param              = 5 -0.01 1.0 0.01\noutput_format_type          = jld2 eigen\n## ONLY FOR 1D EIGENPROBLEMS\nL                           = \nΔx                          = \n## ONLY FOR 2D EIGENPROBLEMS\nLx                          = 10\nLy                          = 10\nnx                          = 100\nny                          = 100\ndifferent_masses            = false\nreduced_density             = false","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Note that we are setting analysis_param keyword. The parameter that we are going to change is the number 5, from 0.01 value to 1.0 value with step 0.01 value.","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/#Run-script","page":"Two-Electrons Coulomb Interaction Potential","title":"Run script","text":"","category":"section"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Create Julia code as","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"@prompt:~/my_directory_path/C2D$ vi run.jl","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Inside run.jl we need to write the following.","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"begin\n    using Pkg\n    Pkg.activate(\"../\")\n    develop_package = true; develop_package ? Pkg.develop(path=\"~/my_path_repo/FEMTISE.jl\") \n    : nothing\n    Pkg.instantiate()\n    using FEMTISE;\n    run_default_eigen_problem(set_type_potential(\"~/my_directory_path/C2D/input.dat\"))\nend","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"After this we can run the simulation using Julia compiler (for example: using multithread running with four threads)","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"@prompt:~/my_directory_path/C2D$ julia -t 4 run.jl ","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/#Analysis","page":"Two-Electrons Coulomb Interaction Potential","title":"Analysis","text":"","category":"section"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"After running we obtain an output data file in jld2 format called name_output_file_eigen_data.jld2.","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Then using Jupyter Notebook (by intermediate Visual Studio Code) we can analyse output file so:","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"@prompt:~/my_directory_path/C2D$ code C2D.ipynb","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Inside C2D.ipynb we need to write the following:","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/#Environment","page":"Two-Electrons Coulomb Interaction Potential","title":"Environment","text":"","category":"section"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Activate Julia environment","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"using Pkg\nPkg.activate(\"./\")\nPkg.instantiate()","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Is necessary to mark FEMTISE package as developed package using specific path repository:","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"develop_package = true; develop_package ? Pkg.develop(path=\"~/my_path_repo/FEMTISE.jl\") : nothing","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Now we install package (if is nesseary) and use specific packages to analyse output data:","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"install_pkg = true\nif install_pkg\n    Pkg.add(\"Plots\")\n    Pkg.add(\"PlotlyJS\")\nend\nusing FEMTISE;\nusing Plots;","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/#Read-output-data","page":"Two-Electrons Coulomb Interaction Potential","title":"Read output data","text":"","category":"section"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"All the information that we need to specify is where we find input file then using specific functions we can collect output data","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"path_input_file_name=\"~/my_directory_path/C2D/input.dat\"\nsimulation_info, output_data = collect_result_data(true,path_input_file_name)","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/#Plotting-figures","page":"Two-Electrons Coulomb Interaction Potential","title":"Plotting figures","text":"","category":"section"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Building functions to plot figures we have:","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"\"\"\"\n    plot_eigenvalues(id,results,range_to_show;<keyword arguments>)\n\n# Aim\n- Plot the eigenvalues of the Hamiltonian operator.\nThe eigenvalues are plotted as a function of the parameter λ.\nThe eigenvalues are obtained from the diagonalization of the Hamiltonian operator.\nThe eigenvalues are plotted for the range of energy levels specified by the range_to_show \nvariable.\nThe keyword arguments are used to set the title, xlabel, ylabel, and legend of the plot.\n\n# Arguments\n- `id`: InputData or InputData1D or InputData2D object.\n- `results`: Results object.\n- `range_to_show::StepRange{Int, Int}`: Range of energy levels to plot.\n- `keyword arguments`:\n    - `set_title::String`: Title of the plot.\n    - `set_xlabel::String`: Label of the x-axis.\n    - `set_ylabel::String`: Label of the y-axis.\n    - `set_legend::Symbol`: Position of the legend.\n\"\"\"\nfunction plot_eigenvalues(id,results,range_to_show::StepRange{Int, Int};show_label=true)\n    if id.analysis_param == false\n        println(\"PLOT ERROR.\")\n        println(\"Check attributes, you are using the wrong function method. Analysis \n        parameter is not activated.\")\n        figure = nothing\n    else\n        plotlyjs()\n        figure = plot(xlabel=\"Parameter λ\",ylabel=\"Eigen-energies (ϵn(λ) [au])\",ticks = \n        :native)\n        for i in range_to_show\n            if show_label\n                figure = scatter!(real.(results.λvector),real(results.ϵ_matrix[i,:]), \n                label=\"n=$(i)\",legend=:top)\n            else\n                figure = scatter!(real.(results.λvector),real(results.ϵ_matrix[i,:]), \n                label=\"\")\n            end\n            figure = plot!(real.(results.λvector),real(results.ϵ_matrix[i,:]),label=\"\")\n        end\n    end\n    return figure\nend","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Now we can plot eigenenergies:","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"fig1=plot_eigenvalues(simulation_info,output_data,1:1:10;show_label=true)\ndisplay(fig1)","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"(Image: figure)","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Also, we can export figures as *pdf format using","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"savefig(fig1,\"./eigen_energies_vs_parameter.pdf\")","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"Following the same logic we can simulate for this coulombic potential and the eigenstates for the first two energy levels are:","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"(Image: figure)","category":"page"},{"location":"examples/coulomb_interaction_2d_potential/","page":"Two-Electrons Coulomb Interaction Potential","title":"Two-Electrons Coulomb Interaction Potential","text":"(Image: figure)","category":"page"},{"location":"#FEMTISE","page":"Home","title":"FEMTISE","text":"","category":"section"},{"location":"#**Warning!**","page":"Home","title":"Warning!","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"***->> The package is under construction <<-***","category":"page"},{"location":"","page":"Home","title":"Home","text":"A documentation generator for Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Julia package repository to resolve Time-Independent Schrödinger equation (TISE) by Finite Element Method (FEM). This is an implementation of GRIDAP package for unidimensional and bidimensional grids.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Project carried out in my PhD studies of Physics at:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Faculty of Mathematics, Astronomy, Physics and Computation (FAMAF)\nThe Enrique Gaviola Institute of Physics (IFEG)","category":"page"}]
}
